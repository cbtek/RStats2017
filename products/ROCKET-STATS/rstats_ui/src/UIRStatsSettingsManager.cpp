/*
    UIRStatsSettingsManager.cpp
    

*/
//UIRStatsSettingsManager.cpp generated by CBTek Solutions on 02-03-2017 at 02:17:32 AM

#include <QSpinBox>
#include <QLabel>
#include <QPushButton>
#include <QLineEdit>
#include <QTableWidget>
#include <QFrame>
#include <QHBoxLayout>
#include <QMessageBox>
#include <QStyleFactory>

#include "UIRStatsSettingsManager.h"
#include "ui_UIRStatsSettingsManager.h"

#include "utility/inc/StringUtils.hpp"
#include "utility/inc/XMLUtils.h"

#include "UIRStatsErrorMessage.h"
#include "UIRStatsUtils.hpp"
#include "UIRStatsScriptProviderConfigDialog.h"

using namespace cbtek::rocketstats::utils;
using namespace cbtek::common::utility;

namespace cbtek {
namespace rocketstats {
namespace ui {

UIRStatsSettingsManager::UIRStatsSettingsManager(QWidget *parent) :
    QDialog(parent),
    m_ui(new Ui_UIRStatsSettingsManager)
{
    m_ui->setupUi(this);
    m_removeIcon = UIRStatsUtils::getIcon("img_remove.png");
    m_editIcon = UIRStatsUtils::getIcon("img_edit.png");    
    m_editButtons = nullptr;
    m_deleteButtons = nullptr;
    onInitScriptProviders();
    onInitThemes();
    onInitKeyBindings();    
    connect(m_ui->m_btnClose,SIGNAL(clicked(bool)),this,SLOT(onClose()));    

    UIRStatsUtils::initButton(m_ui->m_btnClose, "img_exit.png");
    UIRStatsUtils::initButton(m_ui->m_btnNewScriptProvider, "img_add.png");
}

UIRStatsSettingsManager::~UIRStatsSettingsManager()
{
    delete m_ui;
}

void UIRStatsSettingsManager::onClose()
{    
    this->close();
}

void UIRStatsSettingsManager::onInitScriptProviders()
{    
    connect(m_ui->m_btnNewScriptProvider,SIGNAL(clicked(bool)),this,SLOT(onAddScriptProvider()));
    if (m_editButtons)
    {
        delete m_editButtons;
    }

    if (m_deleteButtons)
    {
        delete m_deleteButtons;
    }
    m_editButtons = new QButtonGroup(this);
    m_deleteButtons = new QButtonGroup(this);
    try
    {
        m_props = RStatsUtils::getScriptProviderPropertiesList();
    }
    catch(std::exception& e)
    {
        UIRStatsErrorMessage("ROCKET-STATS Exception",
                             std::string("Could not load ROCKET-STATS Settings dialog. See message below for details:<font style='color:red;'>\n")+
                             std::string(e.what())+"</font>",false).exec();
        return;
    }

    QTableWidget * table = m_ui->m_tblScriptProviders;
    table->clear();
    table->horizontalHeader()->hide();
    table->setRowCount(m_props.size());
    table->setColumnCount(1);
    int row = 0;
    table->setIconSize(QSize(48,48));
    for(const RStatsScriptProviderProperties & prop : m_props)
    {
        QHBoxLayout * layout = new QHBoxLayout;
        QFrame * cellFrame = new QFrame;
        QLabel * label = new QLabel;        
        QLabel * icon = new QLabel;
        QPushButton * deleteButton = new QPushButton;
        QPushButton * editButton = new QPushButton;
        deleteButton->setIconSize(QSize(24,24));
        editButton->setIconSize(QSize(24,24));
        editButton->setMinimumSize(24,24);
        editButton->setMaximumSize(32,32);
        deleteButton->setMinimumSize(24,24);
        deleteButton->setMaximumSize(32,32);
        icon->setMinimumSize(24,24);
        icon->setMaximumSize(32,32);
        QPixmap pixmapIcon = UIRStatsUtils::getIcon(prop.getIcon()).pixmap(32,32);
        if (pixmapIcon.isNull())
        {
            pixmapIcon = UIRStatsUtils::getIcon("img_terminal.png").pixmap(32,32);
        }
        icon->setPixmap(pixmapIcon);
        deleteButton->setIcon(m_removeIcon);
        editButton->setIcon(m_editIcon);
        label->setText(QString::fromStdString(prop.getName()));

        layout->addWidget(icon);
        layout->addWidget(label);
        layout->addWidget(editButton);
        layout->addWidget(deleteButton);
        editButton->setProperty("index",row);
        deleteButton->setProperty("index",row);
        m_editButtons->addButton(editButton);
        m_deleteButtons->addButton(deleteButton);
        cellFrame->setLayout(layout);
        table->setCellWidget(row,0,cellFrame);
        table->setRowHeight(row,48);
        ++row;

    }
    table->verticalHeader()->hide();
    table->horizontalHeader()->hide();
    table->setSelectionMode(QTableWidget::NoSelection);    
    table->horizontalHeader()->setSectionResizeMode(0, QHeaderView::Stretch);
    table->setShowGrid(false);
    table->setAlternatingRowColors(true);
    connect(m_editButtons,SIGNAL(buttonClicked(QAbstractButton*)),this,SLOT(onEditScriptProvider(QAbstractButton*)));
    connect(m_deleteButtons,SIGNAL(buttonClicked(QAbstractButton*)),this,SLOT(onDeleteScriptProvider(QAbstractButton*)));    
}

void UIRStatsSettingsManager::onInitThemes()
{
    std::string current = UIRStatsUtils::getCurrentTheme();
    if (current == "DARK")
    {
        m_ui->m_rdbDark->setChecked(true);
    }
    else if (current == "FUSION")
    {
        m_ui->m_rdbFusion->setChecked(true);
    }
    else m_ui->m_rdbDefault->setChecked(true);

    connect(m_ui->m_rdbDark,SIGNAL(clicked(bool)),this,SLOT(onWriteThemeSettings()));
    connect(m_ui->m_rdbDefault,SIGNAL(clicked(bool)),this,SLOT(onWriteThemeSettings()));
    connect(m_ui->m_rdbFusion,SIGNAL(clicked(bool)),this,SLOT(onWriteThemeSettings()));
}

void UIRStatsSettingsManager::onInitKeyBindings()
{

}

void UIRStatsSettingsManager::onEditScriptProvider(QAbstractButton *button)
{
    //std::cerr <<"onEditScriptProvider"<<std::endl;
    int index = button->property("index").toInt();
    RStatsScriptProviderProperties props = m_props[index];
    UIRStatsScriptProviderConfigDialog(props).exec();
    onInitScriptProviders();
}

void UIRStatsSettingsManager::onDeleteScriptProvider(QAbstractButton *button)
{
    int index = button->property("index").toInt();
    RStatsScriptProviderProperties props = m_props[index];
    int answer = QMessageBox::question(this,"Remove Script Provider?", "Are you sure you want to remove the script provider \""+QString::fromStdString(props.getName())+"\"",QMessageBox::Yes,QMessageBox::No);
    if (answer == QMessageBox::Yes)
    {
        m_ui->m_tblScriptProviders->removeCellWidget(index,0);
        props.removeConfig();
    }
    onInitScriptProviders();
}

void UIRStatsSettingsManager::onAddScriptProvider()
{
   RStatsScriptProviderProperties props;
   UIRStatsScriptProviderConfigDialog(props).exec();
   onInitScriptProviders();
}

void UIRStatsSettingsManager::onWriteThemeSettings()
{
    std::string themeSettings = RStatsUtils::getThemeSettingsFilePath();
    std::ofstream out(themeSettings.c_str(),std::ios::out);
    XMLStreamWriter xml(out);
    xml.writeStartDocument();
    xml.writeStartElementNoAttributes("theme");
    std::string style = "default";
    if (m_ui->m_rdbDark->isChecked())
    {
        style = "dark";
    }
    if (m_ui->m_rdbFusion->isChecked())
    {
        style = "fusion";
    }
    xml.writeTextElement("style",style);
    xml.writeEndElement("theme");
    out.close();
    UIRStatsUtils::loadThemeSettings(qApp);
}
}}}//end namespace

