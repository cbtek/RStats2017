/*
    RStatsSpaceOrTabDelimitedWorkbookStream.cpp
    

*/
//----------------------------------------
//RStatsSpaceOrTabDelimitedWorkbookStream.cpp generated by cbtek on 04-01-2017 at 06:35:19 PM
//----------------------------------------
#include "RStatsSpaceOrTabDelimitedWorkbookStream.h"

#include "utility/inc/StringUtils.hpp"
#include "utility/inc/FileUtils.hpp"

#include <stack>
using namespace cbtek::common::utility;

namespace cbtek {
namespace rocketstats {
namespace utils {
namespace streams {

RStatsSpaceOrTabDelimitedWorkbookStream::RStatsSpaceOrTabDelimitedWorkbookStream(const std::string &filePath)
{
    m_filePath = filePath;
}

void RStatsSpaceOrTabDelimitedWorkbookStream::write(const RStatsWorkbook &workbook)
{
    if (workbook.getNumWorksheets() > 0)
    {
        FileUtils::writeFileContents(m_filePath,
                                     workbook(0).toEvenlySpacedString());
        if (workbook.getNumWorksheets() > 1)
        {
            std::cout << "WARNING: SpaceDelimited does not support saving multiple sheets. Only the first sheet \"" <<workbook(0).getWorksheetTitle() << "\" will be saved." << std::endl;
        }
    }
}

RStatsWorkbook RStatsSpaceOrTabDelimitedWorkbookStream::read()
{
    RStatsWorkbook workbook;    
    std::ifstream in(m_filePath.c_str(), std::ios::in);
    size_t row = 0;
    RStatsWorksheet sheet;
    while (in)
    {
        std::string line;
        std::getline(in,line);        
        if (!in)
        {
            break;
        }
        StringUtils::trimmedInPlace(line);
        std::vector<std::string> items = StringUtils::splitByTokens(line," \t");
        StringUtils::clean(items);
        for (size_t col = 0; col < items.size();++col)
        {
            sheet(row,col) = items[col];
        }
        ++row;
    }
    workbook.addWorksheet(sheet);
    return workbook;
}

RStatsSpaceOrTabDelimitedWorkbookStream::~RStatsSpaceOrTabDelimitedWorkbookStream()
{

}

}}}}//end namespace


