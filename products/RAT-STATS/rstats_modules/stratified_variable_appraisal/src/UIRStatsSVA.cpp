/*
    UIRStatsSVA.cpp
    

*/
//UIRStatsSVA.cpp generated by CBTek Solutions on 01-28-2017 at 10:39:41 PM

#include "UIRStatsSVA.h"
#include "ui_UIRStatsSVA.h"
#include "RStatsSVA.h"

#include <QFileDialog>

#include "rstats_ui/inc/UIRStatsUtils.hpp"
#include "rstats_ui/inc/UIRStatsImportWorksheet.h"
#include "rstats_ui/inc/UIRStatsErrorMessage.h"

#include "rstats_utils/inc/RStatsWorkbookStreamFactory.h"

#include "utility/inc/TimeUtils.hpp"
#include "utility/inc/DateUtils.hpp"

using namespace cbtek::common::utility;
using namespace oig::ratstats::ui;
using namespace oig::ratstats::utils;

namespace oig {
namespace ratstats {
namespace modules {
namespace sva {


UIRStatsSVA::UIRStatsSVA(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui_UIRStatsSVA)
{
    m_ui->setupUi(this);       
    m_ui->menuFile->setTitle("&File");
    m_ui->menuHelp->setTitle("&Help");
    m_fullScreenToggle = false;
    m_ui->m_txtAuditName->setPlaceholderText(QString::fromStdString(RStatsUtils::getAuditName()));
    m_currentCSVFileOutputLabel = nullptr;
    m_currentTextFileOutputLabel = nullptr;

    m_ui->m_dockOptions->setTitleBarWidget(new QWidget());
    int buttonHeight = 32;

    m_iconError = UIRStatsUtils::getIcon("img_error.png");
    m_iconOK = UIRStatsUtils::getIcon("img_ok.png");
    m_iconWarning = UIRStatsUtils::getIcon("img_warning.png");

    UIRStatsUtils::customUISetup(m_ui->m_btnExecute,
                                 m_ui->m_btnExit,
                                 m_ui->m_btnHelp,
                                 m_ui->m_btnImportSampleInputData,
                                 m_ui->m_btnImportSampleSizeData,
                                 nullptr,
                                 m_ui->m_btnAddRowSizeTable,
                                 m_ui->m_btnAddColumnSizeTable,
                                 m_ui->m_btnAddRowDataTable,
                                 m_ui->m_btnAddColumnDataTable,
                                 nullptr,
                                 m_ui->actionExit,
                                 m_ui->actionHelp,
                                 m_ui->actionAbout,
                                 m_ui->actionRecently_Used,
                                 buttonHeight,
                                 this->font());

    m_ui->m_cmbDataInputSheets->addItem("No Sheets Available");
    m_ui->m_cmbSizeInputSheets->addItem("No Sheets Available");
    m_ui->m_cmbDataInputSheets->setEnabled(false);
    m_ui->m_cmbSizeInputSheets->setEnabled(false);

    connect(m_ui->m_chkTextOutput,SIGNAL(toggled(bool)),this,SLOT(onSaveTextFile()));
    connect(m_ui->m_chkCSVOutput,SIGNAL(toggled(bool)),this,SLOT(onSaveCSVFile()));
    connect(m_ui->m_btnAddRowDataTable,SIGNAL(clicked(bool)),this,SLOT(onAddNewRowToDataTable()));
    connect(m_ui->m_btnAddColumnDataTable,SIGNAL(clicked(bool)),this,SLOT(onAddNewColumnToDataTable()));
    connect(m_ui->m_btnAddRowSizeTable,SIGNAL(clicked(bool)),this,SLOT(onAddNewRowToSizeTable()));
    connect(m_ui->m_btnAddColumnSizeTable,SIGNAL(clicked(bool)),this,SLOT(onAddNewColumnToSizeTable()));
    connect(m_ui->m_btnImportSampleInputData,SIGNAL(clicked(bool)),this,SLOT(onImportDataInput()));
    connect(m_ui->m_btnImportSampleSizeData,SIGNAL(clicked(bool)),this,SLOT(onImportSizeInput()));
    connect(m_ui->m_btnHelp,SIGNAL(clicked(bool)),this,SLOT(onHelp()));
    connect(m_ui->m_btnExit,SIGNAL(clicked(bool)),this,SLOT(onExit()));
    connect(m_ui->m_btnExecute,SIGNAL(clicked(bool)),this,SLOT(onExecute()));
    connect(m_ui->m_cmbDataInputSheets,SIGNAL(currentIndexChanged(int)),this,SLOT(onComboDataInputSheetSelected(int)));
    connect(m_ui->m_cmbSizeInputSheets,SIGNAL(currentIndexChanged(int)),this,SLOT(onComboSizeInputSheetSelected(int)));
    connect(&m_clock,SIGNAL(timeout()),this,SLOT(onUpdateClock()));    
    connect(m_ui->m_rdbAudited,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbExamined,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbDifference,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbAuditedAndDifference,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbExaminedAndAudited,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbExaminedAndDifference,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    m_ui->m_rdbExamined->setChecked(true);


    m_ui->m_frmDateTime->hide();
    m_ui->m_grpOutput->hide();
    updateRecentSessions();
    m_clock.start(1000);
    onUpdateClock();
}

UIRStatsSVA::~UIRStatsSVA()
{
    delete m_ui;
}

void UIRStatsSVA::keyPressEvent(QKeyEvent *evt)
{
    if (evt->key() == Qt::Key_F11)
    {
        onToggleFullScreen();
    }
}

void UIRStatsSVA::populateWithColumns(const std::set<size_t>& columns,
                                      QComboBox *comboBox)
{
    comboBox->clear();
    for(const auto& column : columns)
    {
        std::string label = RStatsUtils::getColumnLabelFromIndex(column);
        comboBox->addItem(QString::fromStdString(label));
    }
}

void UIRStatsSVA::populateWithRows(const std::set<size_t>& rows,
                                   QComboBox *comboBox)
{
    comboBox->clear();
    for(const auto& row : rows)
    {
        comboBox->addItem(QString::number(row+1));
    }
}

void UIRStatsSVA::onAddNewRowToDataTable()
{
    m_ui->m_tblData->setRowCount(m_ui->m_tblData->rowCount()+1);
}

void UIRStatsSVA::onAddNewRowToSizeTable()
{
    m_ui->m_tblSizes->setRowCount(m_ui->m_tblSizes->rowCount()+1);
}

void UIRStatsSVA::onAddNewColumnToDataTable()
{
    m_ui->m_tblData->setColumnCount(m_ui->m_tblData->columnCount()+1);
    std::string headerLabel = RStatsUtils::getColumnLabelFromIndex(m_ui->m_tblData->columnCount()-1);
    QTableWidgetItem * item = new QTableWidgetItem;
    item->setText(QString::fromStdString(headerLabel));
    m_ui->m_tblData->setHorizontalHeaderItem(m_ui->m_tblData->columnCount()-1,item);

}

void UIRStatsSVA::onAddNewColumnToSizeTable()
{
    m_ui->m_tblSizes->setColumnCount(m_ui->m_tblSizes->columnCount()+1);
    std::string headerLabel = RStatsUtils::getColumnLabelFromIndex(m_ui->m_tblSizes->columnCount()-1);
    QTableWidgetItem * item = new QTableWidgetItem;
    item->setText(QString::fromStdString(headerLabel));
    m_ui->m_tblSizes->setHorizontalHeaderItem(m_ui->m_tblSizes->columnCount()-1,item);
}

void UIRStatsSVA::onUpdateRowColumnExtentsForDataTable()
{
    std::set<size_t> rows,cols;
    m_currentDataSheet.findDataRowsAndColumns(rows,cols);
    populateWithColumns(cols,m_ui->m_cmbAuditedDataTable);
    populateWithColumns(cols,m_ui->m_cmbExaminedDataTable);
    populateWithColumns(cols,m_ui->m_cmbDifferenceDataTable);
    populateWithRows(rows,m_ui->m_cmbDataRowStartDataTable);
}

void UIRStatsSVA::onUpdateRowColumnExtentsForSizeTable()
{
    std::set<size_t> rows,cols;
    m_currentSizeSheet.findDataRowsAndColumns(rows,cols);
    populateWithColumns(cols,m_ui->m_cmbSampleCountSizeTable);
    populateWithColumns(cols,m_ui->m_cmbUniverseCountSizeTable);
    populateWithRows(rows,m_ui->m_cmbDataRowStartSizeTable);
}

bool UIRStatsSVA::onValidate()
{
    m_conditionLogger.clear();
    m_ui->m_lstErrorConsole->clear();
    m_conditionLogger.addWarning((
                                   m_ui->m_rdbAuditedAndDifference->isChecked() ||
                                   m_ui->m_rdbExaminedAndAudited->isChecked()) &&
                                   m_ui->m_cmbAuditedDataTable->count() < 2,
                                   ("There are NOT enough columns for this 'audit' data format.\n Please choose another data format or import a different worksheet."));


    m_conditionLogger.addWarning((
                                   m_ui->m_rdbAuditedAndDifference->isChecked() ||
                                   m_ui->m_rdbExaminedAndDifference->isChecked()) &&
                                   m_ui->m_cmbAuditedDataTable->count() < 2,
                                   "There are NOT enough columns for this 'difference' data format.\n Please choose another data format or import a different worksheet.");

     m_conditionLogger.addError((m_ui->m_tblData->rowCount() == 0),
                                "You have NOT created/imported any content rows into the data table.");

     m_conditionLogger.addError((m_ui->m_tblSizes->rowCount() == 0),
                                "You have NOT created/imported any content rows into the universe/sample size table.");

     m_conditionLogger.addError((m_ui->m_tblData->columnCount() == 0),
                                "You have NOT created/imported any content columns into the data table.");

     m_conditionLogger.addError((m_ui->m_tblSizes->columnCount() == 0),
                                "You have NOT created/imported any content columns into the universe/sample size table.");

     m_conditionLogger.addWarning((!m_ui->m_chkCSVOutput->isChecked() && !m_ui->m_chkTextOutput->isChecked()),
                                "You have NOT selected an output file for the results.  Assuming screen display only.");

     m_conditionLogger.addWarning(m_ui->m_txtAuditName->text().isEmpty(),
                                  "You have NOT set the name for this audit.  Using auto-generated name: '"+m_ui->m_txtAuditName->placeholderText().toStdString()+"'");

     if (!m_conditionLogger.hasMessages())
     {         
         if (!m_fullScreenToggle)
         {
            m_ui->m_dockErrorConsole->hide();
            m_ui->m_lblErrorConsole->setVisible(true);
            m_ui->m_lstErrorConsole->setVisible(false);
         }


         m_ui->m_btnExecute->setEnabled(true);
         return true;
     }     
     if (!m_fullScreenToggle)
     {
        m_ui->m_dockErrorConsole->show();
        m_ui->m_lblErrorConsole->setVisible(false);
        m_ui->m_lstErrorConsole->setVisible(true);
     }
     size_t index = 0;
     for(const std::string & message : m_conditionLogger.getMessages())
     {
         QListWidgetItem * item = new QListWidgetItem;
         item->setText(QString::fromStdString(message));
         if (m_conditionLogger.isError(index))
         {
             item->setIcon(m_iconError);
         }
         else if (m_conditionLogger.isWarning(index))
         {
             item->setIcon(m_iconWarning);
         }
         else
         {
             item->setIcon(m_iconOK);
         }
         ++index;
         m_ui->m_lstErrorConsole->addItem(item);
     }

     if (m_conditionLogger.hasError())
     {
         m_ui->m_btnExecute->setEnabled(false);
     }
     else m_ui->m_btnExecute->setEnabled(true);
     return false;
}

void UIRStatsSVA::onSampleSizeInputSheetSelected(const RStatsWorksheet &sheet)
{    
    UIRStatsUtils::bindSheetToUI(sheet,m_ui->m_tblSizes,true,0,0);
    m_currentSizeSheet = sheet;
    onUpdateRowColumnExtentsForSizeTable();
    m_ui->m_tblSizes->verticalHeader()->show();
}

void UIRStatsSVA::onSampleDataInputSheetSelected(const RStatsWorksheet &sheet)
{
    UIRStatsUtils::bindSheetToUI(sheet,m_ui->m_tblData,true,0,0);
    m_currentDataSheet = sheet;
    onUpdateRowColumnExtentsForDataTable();
    m_ui->m_tblData->verticalHeader()->show();
}

void UIRStatsSVA::onComboSizeInputSheetSelected(int row)
{
    if (row < 0)
    {
        return;
    }
    size_t index = static_cast<size_t>(row);
    if (index < m_currentSizeWorkbook.getNumWorksheets())
    {
        RStatsWorksheet sheet = m_currentSizeWorkbook(index);        
        onSampleSizeInputSheetSelected(sheet);
    }
}

void UIRStatsSVA::onComboDataInputSheetSelected(int row)
{
    if (row < 0)
    {
        return;
    }
    size_t index = static_cast<size_t>(row);
    if (index < m_currentDataWorkbook.getNumWorksheets())
    {        
        RStatsWorksheet sheet = m_currentDataWorkbook(index);        
        onSampleDataInputSheetSelected(sheet);
    }
}

void UIRStatsSVA::onUpdateClock()
{
    m_ui->m_lblDate->setText(QString::fromStdString(DateUtils::toCurrentShortDateString()));
    m_ui->m_lblTime->setText(QString::fromStdString(TimeUtils::toCurrent12HourTimeString()));
    onValidate();
}

void UIRStatsSVA::onExecute()
{
    onValidate();
    RStatsDataFormatTypeIndex dfIndex;
    if (m_ui->m_rdbAudited->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::Audit;
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbAuditedDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbDifference->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::Difference;
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbDifferenceDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbExamined->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::Examine;
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbExaminedDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbAuditedAndDifference->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::AuditAndDifference;
        dfIndex.secondaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbDifferenceDataTable->currentText().toStdString());
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbAuditedDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbExaminedAndDifference->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::ExamineAndDifference;
        dfIndex.secondaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbDifferenceDataTable->currentText().toStdString());
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbExaminedDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbExaminedAndAudited->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::ExamineAndAudit;
        dfIndex.secondaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbAuditedDataTable->currentText().toStdString());
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbExaminedDataTable->currentText().toStdString());
    }
    m_dataFormatType = dfIndex.type;

    size_t sizeSheetSampleColumn = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbSampleCountSizeTable->currentText().toStdString());
    size_t sizeSheetUniverseColumn = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbUniverseCountSizeTable->currentText().toStdString());
    size_t sizeSheetRowDataStart = static_cast<size_t>(m_ui->m_cmbDataRowStartSizeTable->currentText().toInt()-1);
    size_t dataSheetRowDataStart = static_cast<size_t>(m_ui->m_cmbDataRowStartDataTable->currentText().toInt()-1);
    RStatsSVA sva;
    std::string auditName = m_ui->m_txtAuditName->text().toStdString();
    if (StringUtils::isEmpty(auditName))
    {
        auditName = m_ui->m_txtAuditName->placeholderText().toStdString();
    }

    sva.execute(auditName,
              m_currentDataSheet,
              m_currentSizeSheet,
              dfIndex,
              dataSheetRowDataStart,
              sizeSheetSampleColumn,
              sizeSheetUniverseColumn,
              sizeSheetRowDataStart);

    RStatsWorkbook workbook;
    sva.saveToWorkbook(workbook);

    //Clear layout
    QLayoutItem *item;
    while ((item = m_ui->m_grpOutput->layout()->takeAt(0)))
    {
        delete item;
    }
    m_outputWorkbook = new UIRStatsWorkbook;
    m_ui->m_grpOutput->layout()->addWidget(m_outputWorkbook);
    m_outputWorkbook->setWorkbook(workbook);
    m_outputWorkbook->onStretchToContents();
    m_outputWorkbook->onHideGridLines();
    m_ui->m_lblNoData->hide();
    m_ui->m_grpOutput->show();

    if (!StringUtils::isEmpty(m_currentTextFileOutput.toStdString()))
    {
        workbook.save(m_currentTextFileOutput.toStdString());
    }

    if (!StringUtils::isEmpty(m_currentCSVFileOutput.toStdString()))
    {
        workbook.save(m_currentCSVFileOutput.toStdString());
    }
    onToggleFullScreen();

    RStatsSVASessionData sessionData = getSessionData();
    sessionData.setCreationDate(DateUtils::getCurrentDate().toDateInteger());
    sessionData.setCreationTime(TimeUtils::getCurrentTime().toTimeInteger());
    m_recentSessionsMap[sessionData.getAuditName()]=RStatsModuleSessionDataPtr(new RStatsSVASessionData(sessionData));
    RStatsUtils::saveRecentSession(m_recentSessionsMap[sessionData.getAuditName()]);
    updateRecentSessions();
}

void UIRStatsSVA::onExit()
{
    if (m_fullScreenToggle)
    {
        onToggleFullScreen();
    }
    else
    {
        this->close();
    }
}

void UIRStatsSVA::onToggleFullScreen()
{
    m_fullScreenToggle = !m_fullScreenToggle;
    if (m_fullScreenToggle)
    {
        m_ui->m_dockErrorConsole->hide();
        m_ui->m_dockOptions->hide();
        m_ui->m_dockSampleDataInput->hide();
        m_ui->m_dockSampleSizeInput->hide();
        m_ui->m_btnHelp->hide();
        m_ui->m_btnExecute->hide();
        m_ui->m_btnExit->setText("Click here or press F11 to exit full-screen mode");
        m_ui->m_grpOutput->setTitle("Output Data (Press F11 to exit full-screen mode)");
        this->setWindowState(Qt::WindowMaximized);
    }
    else
    {
        m_ui->m_dockErrorConsole->show();
        m_ui->m_dockOptions->show();
        m_ui->m_dockSampleDataInput->show();
        m_ui->m_dockSampleSizeInput->show();
        m_ui->m_frmCommand->show();
        m_ui->m_grpOutput->setTitle("Output Data:");
        m_ui->m_btnHelp->show();
        m_ui->m_btnExecute->show();
        m_ui->m_btnExit->setText("Exit");
    }
}

void UIRStatsSVA::importDataTable(const std::string &dataTableFilePath)
{
    if (StringUtils::isEmpty(dataTableFilePath) || !FileUtils::fileExists(dataTableFilePath))
    {
        return;
    }
    m_dataTableImportFilePath = QString::fromStdString(dataTableFilePath);
    m_ui->m_cmbDataInputSheets->clear();
    try
    {
        std::string filePath = m_dataTableImportFilePath.toStdString();
        m_currentDataWorkbook.load(filePath);
        if (m_currentDataWorkbook.getNumWorksheets() == 0)
        {
            THROW_GENERIC_EXCEPTION("No worksheets were found in \""+filePath+"\"")
        }
        m_ui->m_cmbDataInputSheets->setEnabled(true);
        bool setOther = false;
        if (m_currentSizeWorkbook.getNumWorksheets() == 0)
        {
            setOther = true;
            m_sizeTableImportFilePath = m_dataTableImportFilePath;
            m_currentSizeWorkbook = m_currentDataWorkbook;
        }

        std::vector<std::string> worksheetNames = m_currentDataWorkbook.getWorksheetNames();
        if (setOther)
        {
            m_ui->m_cmbSizeInputSheets->clear();
            m_ui->m_cmbSizeInputSheets->setEnabled(true);
        }
        for(const auto& sheetName : worksheetNames)
        {
            if (setOther)
            {
                m_ui->m_cmbSizeInputSheets->addItem(QString::fromStdString(sheetName));
            }
            m_ui->m_cmbDataInputSheets->addItem(QString::fromStdString(sheetName));
        }
        onUpdateRowColumnExtentsForDataTable();
    }
    catch(const std::exception& exception)
    {
        m_ui->m_cmbDataInputSheets->addItem("No Sheets Available");
        m_ui->m_cmbDataInputSheets->setEnabled(false);
        QString title = "Error occured trying to import " + m_dataTableImportFilePath;
        QString message = QString(exception.what());
        UIRStatsErrorMessage(title,message).exec();
        return;
    }
}

void UIRStatsSVA::importSizeTable(const std::string &sizeTableFilePath)
{
    if (StringUtils::isEmpty(sizeTableFilePath) || !FileUtils::fileExists(sizeTableFilePath))
    {
        return;
    }
    m_sizeTableImportFilePath = QString::fromStdString(sizeTableFilePath);
    m_ui->m_cmbSizeInputSheets->clear();
    try
    {
        std::string filePath = m_sizeTableImportFilePath.toStdString();
        m_currentSizeWorkbook.load(filePath);
        if (m_currentSizeWorkbook.getNumWorksheets() == 0)
        {
            THROW_GENERIC_EXCEPTION("No worksheets were found in \""+filePath+"\"")
        }
        m_ui->m_cmbSizeInputSheets->setEnabled(true);
        bool setOther = false;
        if (m_currentDataWorkbook.getNumWorksheets() == 0)
        {
            setOther = true;
            m_dataTableImportFilePath = m_sizeTableImportFilePath;
            m_currentDataWorkbook = m_currentSizeWorkbook;
        }

        std::vector<std::string> worksheetNames = m_currentSizeWorkbook.getWorksheetNames();

        if (setOther)
        {
            m_ui->m_cmbDataInputSheets->clear();
            m_ui->m_cmbDataInputSheets->setEnabled(true);
        }

        for(const auto& sheetName : worksheetNames)
        {
            if (setOther)
            {
                m_ui->m_cmbDataInputSheets->addItem(QString::fromStdString(sheetName));
            }
            m_ui->m_cmbSizeInputSheets->addItem(QString::fromStdString(sheetName));
        }
        onUpdateRowColumnExtentsForSizeTable();
    }
    catch(const std::exception& exception)
    {
        m_ui->m_cmbSizeInputSheets->addItem("No Sheets Available");
        m_ui->m_cmbSizeInputSheets->setEnabled(false);
        QString title = "Error occured trying to import " + m_sizeTableImportFilePath;
        QString message = QString(exception.what());
        UIRStatsErrorMessage(title,message).exec();
        return;
    }
}
void UIRStatsSVA::onImportDataInput()
{
    m_dataTableImportFilePath = QFileDialog::getOpenFileName(this,"Import Stratified Variable Appraisal Sample Input File...","","Supported Input Files(*.csv *.xlsx *.dif)");
    if (!m_dataTableImportFilePath.isEmpty() && QFile::exists(m_dataTableImportFilePath))
    {
        importDataTable(m_dataTableImportFilePath.toStdString());
    }
}

void UIRStatsSVA::onImportSizeInput()
{
    m_sizeTableImportFilePath = QFileDialog::getOpenFileName(this,"Import Stratified Variable Appraisal Universe/Sample Size Input File...","","Supported Input Files(*.csv *.xlsx *.dif)");
    if (!m_sizeTableImportFilePath.isEmpty() && QFile::exists(m_sizeTableImportFilePath))
    {
       importSizeTable(m_sizeTableImportFilePath.toStdString());
    }
}

void UIRStatsSVA::onHelp()
{

}

void UIRStatsSVA::onUpdateDataFormatSelection()
{
    m_ui->m_cmbAuditedDataTable->setEnabled(false);
    m_ui->m_cmbExaminedDataTable->setEnabled(false);
    m_ui->m_cmbDifferenceDataTable->setEnabled(false);
    if (m_ui->m_rdbAudited->isChecked())
    {
        m_ui->m_cmbAuditedDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbDifference->isChecked())
    {
        m_ui->m_cmbDifferenceDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbExamined->isChecked())
    {
        m_ui->m_cmbExaminedDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbAuditedAndDifference->isChecked())
    {
        m_ui->m_cmbDifferenceDataTable->setEnabled(true);
        m_ui->m_cmbAuditedDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbExaminedAndDifference->isChecked())
    {
        m_ui->m_cmbDifferenceDataTable->setEnabled(true);
        m_ui->m_cmbExaminedDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbExaminedAndAudited->isChecked())
    {
        m_ui->m_cmbAuditedDataTable->setEnabled(true);
        m_ui->m_cmbExaminedDataTable->setEnabled(true);
    }
}

RStatsSVASessionData UIRStatsSVA::getSessionData() const
{
    QString text = m_ui->m_txtAuditName->text();
    if (text.isEmpty())
    {
        text = m_ui->m_txtAuditName->placeholderText();
    }
    RStatsSVASessionData data;
    data.setAuditName(text.toStdString());
    data.setAuditColumn(m_ui->m_cmbAuditedDataTable->currentText().toStdString());
    data.setExamineColumn(m_ui->m_cmbExaminedDataTable->currentText().toStdString());
    data.setDifferenceColumn(m_ui->m_cmbDifferenceDataTable->currentText().toStdString());
    data.setSampleColumn(m_ui->m_cmbSampleCountSizeTable->currentText().toStdString());
    data.setUniverseColumn(m_ui->m_cmbUniverseCountSizeTable->currentText().toStdString());
    data.setDataFormat(m_dataFormatType);
    data.setDataTableRowStart(m_ui->m_cmbDataRowStartDataTable->currentText().toInt());
    data.setSizeTableRowStart(m_ui->m_cmbDataRowStartSizeTable->currentText().toInt());
    data.setDataTableFilePath(m_dataTableImportFilePath.toStdString());
    data.setSizeTableFilePath(m_sizeTableImportFilePath.toStdString());
    data.setCSVOutputFile(m_currentCSVFileOutput.toStdString());
    data.setTextOutputFile(m_currentTextFileOutput.toStdString());
    data.setSizeTableSheetName(m_ui->m_cmbSizeInputSheets->currentText().toStdString());
    data.setDataTableSheetName(m_ui->m_cmbDataInputSheets->currentText().toStdString());
    return data;
}

void UIRStatsSVA::setSessionData(const RStatsSVASessionData &data)
{
    m_ui->m_txtAuditName->setText(QString::fromStdString(data.getAuditName()));
    m_currentDataWorkbook.clear();
    m_currentSizeWorkbook.clear();
    m_currentDataSheet.setWorksheetTitle("Data Sheet");
    m_currentSizeSheet.setWorksheetTitle("Size Sheet");
    m_currentDataWorkbook.addWorksheet(m_currentDataSheet);
    m_currentSizeWorkbook.addWorksheet(m_currentSizeSheet);
    if (FileUtils::fileExists(data.getDataTableFilePath()))
    {
        importDataTable(data.getDataTableFilePath());
    }

    if (FileUtils::fileExists(data.getSizeTableFilePath()))
    {
        importSizeTable(data.getSizeTableFilePath());
    }
    onUpdateRowColumnExtentsForDataTable();
    onUpdateRowColumnExtentsForSizeTable();
    onSampleDataInputSheetSelected(m_currentDataSheet);
    onSampleSizeInputSheetSelected(m_currentSizeSheet);

    if (!StringUtils::isEmpty(data.getDataTableSheetName()))
    {
        m_ui->m_cmbDataInputSheets->setCurrentText(QString::fromStdString(data.getDataTableSheetName()));
    }
    if (!StringUtils::isEmpty(data.getSizeTableSheetName()))
    {
        m_ui->m_cmbSizeInputSheets->setCurrentText(QString::fromStdString(data.getSizeTableSheetName()));
    }

    switch(data.getDataFormat())
    {
        case RStatsDataFormatType::Difference:m_ui->m_rdbDifference->setChecked(true);break;
        case RStatsDataFormatType::Examine:m_ui->m_rdbExamined->setChecked(true);break;
        case RStatsDataFormatType::AuditAndDifference:m_ui->m_rdbAuditedAndDifference->setChecked(true);break;
        case RStatsDataFormatType::ExamineAndAudit:m_ui->m_rdbExaminedAndAudited->setChecked(true);break;
        case RStatsDataFormatType::ExamineAndDifference:m_ui->m_rdbExaminedAndDifference->setChecked(true);break;
        case RStatsDataFormatType::Audit:m_ui->m_rdbAudited->setChecked(true);break;
    }

    m_ui->m_cmbAuditedDataTable->setCurrentText(QString::fromStdString(data.getAuditColumn()));
    m_ui->m_cmbExaminedDataTable->setCurrentText(QString::fromStdString(data.getAuditColumn()));
    m_ui->m_cmbDifferenceDataTable->setCurrentText(QString::fromStdString(data.getAuditColumn()));
    m_ui->m_cmbDataRowStartDataTable->setCurrentText(QString::number(data.getDataTableRowStart()));
    m_ui->m_cmbDataRowStartSizeTable->setCurrentText(QString::number(data.getSizeTableRowStart()));
    m_ui->m_cmbSampleCountSizeTable->setCurrentText(QString::fromStdString(data.getSampleColumn()));
    m_ui->m_cmbUniverseCountSizeTable->setCurrentText(QString::fromStdString(data.getUniverseColumn()));

    m_autoSetFileOutput = true;
    if (!data.getCSVOutputFile().empty())
    {
        m_ui->m_chkCSVOutput->setChecked(true);
        setCSVFileOutput(data.getTextOutputFile());
        m_ui->m_chkCSVOutput->setToolTip(QString::fromStdString(data.getCSVOutputFile()));
    }
    if (!data.getTextOutputFile().empty())
    {
        m_ui->m_chkTextOutput->setChecked(true);
        setTextFileOutput(data.getTextOutputFile());
        m_ui->m_chkTextOutput->setToolTip(QString::fromStdString(data.getTextOutputFile()));
    }

    m_autoSetFileOutput = false;
}

void UIRStatsSVA::onClearRecentSessions()
{
    RStatsUtils::clearRecentSessions(c_RECENT_SESSION_EXTENSION);
    updateRecentSessions();
}

void UIRStatsSVA::onSaveTextFile()
{
    if (m_autoSetFileOutput) return;
    if (m_ui->m_chkTextOutput->isChecked())
    {
        m_currentTextFileOutput = UIRStatsUtils::setOutputFile(
                                                               m_ui->m_chkTextOutput,
                                                               "Save to Text file...",
                                                               "*.txt");
        setTextFileOutput(m_currentTextFileOutput.toStdString());
    }
    else m_ui->m_statusBar->removeWidget(m_currentTextFileOutputLabel);

}

void UIRStatsSVA::onSaveCSVFile()
{
    if (m_autoSetFileOutput) return;
    if (m_ui->m_chkCSVOutput->isChecked())
    {
        m_currentCSVFileOutput = UIRStatsUtils::setOutputFile(
                                                              m_ui->m_chkCSVOutput,
                                                              "Save to CSV file...",
                                                              "*.csv");
        setCSVFileOutput(m_currentCSVFileOutput.toStdString());
    }
    else m_ui->m_statusBar->removeWidget(m_currentCSVFileOutputLabel);
}

void UIRStatsSVA::onRecentSessionSelected(QAction* action)
{
    std::string name = action->property("name").toString().toStdString();
    if (m_recentSessionsMap.count(name))
    {
        RStatsSVASessionData * data = dynamic_cast<RStatsSVASessionData*>(m_recentSessionsMap[name].get());
        setSessionData(*data);
    }
}

void UIRStatsSVA::updateRecentSessions()
{
    std::pair<QActionGroup*,QAction*> actionPair=UIRStatsUtils::buildRecentSessions<RStatsSVASessionData>(
                                                 this,
                                                 m_ui->actionRecently_Used,
                                                 this->m_recentSessionsMap,
                                                 c_RECENT_SESSION_EXTENSION);


    if (actionPair.first && actionPair.second)
    {
        connect(actionPair.first,SIGNAL(triggered(QAction*)),this,SLOT(onRecentSessionSelected(QAction*)));
        connect(actionPair.second,SIGNAL(triggered(bool)),this,SLOT(onClearRecentSessions()));
    }

}

void UIRStatsSVA::setTextFileOutput(const std::string &textFile)
{
    m_currentTextFileOutput = QString::fromStdString(textFile);
    if (!m_currentTextFileOutput.isEmpty())
    {
        if (m_currentTextFileOutputLabel == nullptr)
        {
            m_currentTextFileOutputLabel = new QLabel;
            m_currentTextFileOutputLabel->setStyleSheet("QLabel{padding:2px;border-radius:5px;background:#AAAAFF;color:#000000;border:1px solid grey;}");
        }
        m_ui->m_statusBar->removeWidget(m_currentTextFileOutputLabel);
        m_currentTextFileOutputLabel->setText("<b>Text File:</b> "+m_currentTextFileOutput);
        m_ui->m_statusBar->addPermanentWidget(m_currentTextFileOutputLabel);
        m_currentTextFileOutputLabel->show();
    }
    else m_ui->m_statusBar->removeWidget(m_currentTextFileOutputLabel);
}

void UIRStatsSVA::setCSVFileOutput(const std::string &csvFile)
{
    m_currentCSVFileOutput = QString::fromStdString(csvFile);
    if (!m_currentCSVFileOutput.isEmpty())
    {
        if (m_currentCSVFileOutputLabel == nullptr)
        {
            m_currentCSVFileOutputLabel = new QLabel;
            m_currentCSVFileOutputLabel->setStyleSheet("QLabel{padding:2px;border-radius:5px;background:#AAAAFF;color:#000000;border:1px solid grey;}");
        }
        m_ui->m_statusBar->removeWidget(m_currentCSVFileOutputLabel);
        m_currentCSVFileOutputLabel->setText("<b>CSV File</b>: "+m_currentCSVFileOutput);
        m_ui->m_statusBar->addPermanentWidget(m_currentCSVFileOutputLabel);
        m_currentCSVFileOutputLabel->show();
    }
    else m_ui->m_statusBar->removeWidget(m_currentCSVFileOutputLabel);
}


}}}}//end namespace

