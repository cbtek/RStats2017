/*
    UIRStatsSVA.cpp
    

*/
//UIRStatsSVA.cpp generated by CBTek Solutions on 01-28-2017 at 10:39:41 PM

#include "UIRStatsSVA.h"
#include "ui_UIRStatsSVA.h"
#include "RStatsSVA.h"

#include <QFileDialog>

#include "rstats_ui/inc/UIRStatsUtils.hpp"
#include "rstats_ui/inc/UIRStatsImportWorksheet.h"
#include "rstats_ui/inc/UIRStatsErrorMessage.h"

#include "rstats_utils/inc/RStatsWorkbookStreamFactory.h"

#include "utility/inc/TimeUtils.hpp"
#include "utility/inc/DateUtils.hpp"

using namespace cbtek::common::utility;
using namespace oig::ratstats::ui;
using namespace oig::ratstats::utils;

namespace oig {
namespace ratstats {
namespace modules {
namespace sva {


UIRStatsSVA::UIRStatsSVA(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui_UIRStatsSVA)
{
    m_ui->setupUi(this);

    //initialize default icons
    m_iconFolder = UIRStatsUtils::getIcon("img_folder.png");
    m_iconHelp = UIRStatsUtils::getIcon("img_help.png");
    m_iconExit = UIRStatsUtils::getIcon("img_exit.png");
    m_iconSave = UIRStatsUtils::getIcon("img_save.png");
    m_iconRun = UIRStatsUtils::getIcon("img_run.png");
    m_iconAdd = UIRStatsUtils::getIcon("img_add.png");
    m_iconWarning = UIRStatsUtils::getIcon("img_warning.png");
    m_iconError = UIRStatsUtils::getIcon("img_error.png");
    m_iconOK = UIRStatsUtils::getIcon("img_ok.png");

    m_ui->m_dockOptions->setTitleBarWidget(new QWidget());
    int buttonHeight = 32;
    UIRStatsUtils::setButtonStyle(m_ui->m_btnExit,this->font(),m_iconExit,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnHelp,this->font(),m_iconHelp,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnContinue,this->font(),m_iconRun,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnImportSampleSizeData,this->font(),m_iconFolder,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnImportSampleInputData,this->font(),m_iconFolder,buttonHeight);

    UIRStatsUtils::setButtonStyle(m_ui->m_btnAddColumnSizeTable,this->font(),m_iconAdd,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnAddColumnDataTable,this->font(),m_iconAdd,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnAddRowSizeTable,this->font(),m_iconAdd,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnAddRowDataTable,this->font(),m_iconAdd,buttonHeight);

    m_ui->m_cmbDataInputSheets->addItem("No Sheets Available");
    m_ui->m_cmbSizeInputSheets->addItem("No Sheets Available");
    m_ui->m_cmbDataInputSheets->setEnabled(false);
    m_ui->m_cmbSizeInputSheets->setEnabled(false);

    connect(m_ui->m_chkTextOutput,SIGNAL(toggled(bool)),this,SLOT(onSaveTextFile()));
    connect(m_ui->m_chkCSVOutput,SIGNAL(toggled(bool)),this,SLOT(onSaveCSVFile()));
    connect(m_ui->m_btnAddRowDataTable,SIGNAL(clicked(bool)),this,SLOT(onAddNewRowToDataTable()));
    connect(m_ui->m_btnAddColumnDataTable,SIGNAL(clicked(bool)),this,SLOT(onAddNewColumnToDataTable()));
    connect(m_ui->m_btnAddRowSizeTable,SIGNAL(clicked(bool)),this,SLOT(onAddNewRowToSizeTable()));
    connect(m_ui->m_btnAddColumnSizeTable,SIGNAL(clicked(bool)),this,SLOT(onAddNewColumnToSizeTable()));
    connect(m_ui->m_btnImportSampleInputData,SIGNAL(clicked(bool)),this,SLOT(onImportDataInput()));
    connect(m_ui->m_btnImportSampleSizeData,SIGNAL(clicked(bool)),this,SLOT(onImportSizeInput()));
    connect(m_ui->m_btnHelp,SIGNAL(clicked(bool)),this,SLOT(onHelp()));
    connect(m_ui->m_btnExit,SIGNAL(clicked(bool)),this,SLOT(onExit()));
    connect(m_ui->m_btnContinue,SIGNAL(clicked(bool)),this,SLOT(onContinue()));    
    connect(m_ui->m_cmbDataInputSheets,SIGNAL(currentIndexChanged(int)),this,SLOT(onComboDataInputSheetSelected(int)));
    connect(m_ui->m_cmbSizeInputSheets,SIGNAL(currentIndexChanged(int)),this,SLOT(onComboSizeInputSheetSelected(int)));
    connect(&m_clock,SIGNAL(timeout()),this,SLOT(onUpdateClock()));    
    connect(m_ui->m_rdbAudited,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbExamined,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbDifference,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbAuditedAndDifference,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbExaminedAndAudited,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    connect(m_ui->m_rdbExaminedAndDifference,SIGNAL(toggled(bool)),this,SLOT(onUpdateDataFormatSelection()));
    m_ui->m_rdbExamined->setChecked(true);

    //m_ui->m_lblNoData->hide();
    m_ui->m_frmDateTime->hide();
    m_ui->m_grpOutput->hide();
    m_clock.start(1000);
    onUpdateClock();
}

UIRStatsSVA::~UIRStatsSVA()
{
    delete m_ui;
}

void UIRStatsSVA::populateWithColumns(const std::set<size_t>& columns,
                                      QComboBox *comboBox)
{
    comboBox->clear();
    for(const auto& column : columns)
    {
        std::string label = RStatsUtils::getColumnLabelFromIndex(column);
        comboBox->addItem(QString::fromStdString(label));
    }
}

void UIRStatsSVA::populateWithRows(const std::set<size_t>& rows,
                                   QComboBox *comboBox)
{
    comboBox->clear();
    for(const auto& row : rows)
    {
        comboBox->addItem(QString::number(row+1));
    }
}

void UIRStatsSVA::onAddNewRowToDataTable()
{
    m_ui->m_tblData->setRowCount(m_ui->m_tblData->rowCount()+1);
}

void UIRStatsSVA::onAddNewRowToSizeTable()
{
    m_ui->m_tblSizes->setRowCount(m_ui->m_tblSizes->rowCount()+1);
}

void UIRStatsSVA::onAddNewColumnToDataTable()
{
    m_ui->m_tblData->setColumnCount(m_ui->m_tblData->columnCount()+1);
    std::string headerLabel = RStatsUtils::getColumnLabelFromIndex(m_ui->m_tblData->columnCount()-1);
    QTableWidgetItem * item = new QTableWidgetItem;
    item->setText(QString::fromStdString(headerLabel));
    m_ui->m_tblData->setHorizontalHeaderItem(m_ui->m_tblData->columnCount()-1,item);
}

void UIRStatsSVA::onAddNewColumnToSizeTable()
{
    m_ui->m_tblSizes->setColumnCount(m_ui->m_tblSizes->columnCount()+1);
    std::string headerLabel = RStatsUtils::getColumnLabelFromIndex(m_ui->m_tblSizes->columnCount()-1);
    QTableWidgetItem * item = new QTableWidgetItem;
    item->setText(QString::fromStdString(headerLabel));
    m_ui->m_tblSizes->setHorizontalHeaderItem(m_ui->m_tblSizes->columnCount()-1,item);
}

void UIRStatsSVA::onUpdateRowColumnExtentsForDataTable()
{
    std::set<size_t> rows,cols;
    m_currentDataSheet.findDataRowsAndColumns(rows,cols);
    populateWithColumns(cols,m_ui->m_cmbAuditedDataTable);
    populateWithColumns(cols,m_ui->m_cmbExaminedDataTable);
    populateWithColumns(cols,m_ui->m_cmbDifferenceDataTable);
    populateWithRows(rows,m_ui->m_cmbDataRowStartDataTable);
}

void UIRStatsSVA::onUpdateRowColumnExtentsForSizeTable()
{
    std::set<size_t> rows,cols;
    m_currentSizeSheet.findDataRowsAndColumns(rows,cols);
    populateWithColumns(cols,m_ui->m_cmbSampleCountSizeTable);
    populateWithColumns(cols,m_ui->m_cmbUniverseCountSizeTable);
    populateWithRows(rows,m_ui->m_cmbDataRowStartSizeTable);
}

bool UIRStatsSVA::onValidate()
{
    m_conditionLogger.clear();
    m_ui->m_lstErrorConsole->clear();
    m_conditionLogger.addWarning((
                                   m_ui->m_rdbAuditedAndDifference->isChecked() ||
                                   m_ui->m_rdbExaminedAndAudited->isChecked()) &&
                                   m_ui->m_cmbAuditedDataTable->count() < 2,
                                   ("There are NOT enough columns for this 'audit' data format.\n Please choose another data format or import a different worksheet."));


    m_conditionLogger.addWarning((
                                   m_ui->m_rdbAuditedAndDifference->isChecked() ||
                                   m_ui->m_rdbExaminedAndDifference->isChecked()) &&
                                   m_ui->m_cmbAuditedDataTable->count() < 2,
                                   "There are NOT enough columns for this 'difference' data format.\n Please choose another data format or import a different worksheet.");

     m_conditionLogger.addError((m_ui->m_tblData->rowCount() == 0),
                                "You have NOT created/imported any content rows into the data table.");

     m_conditionLogger.addError((m_ui->m_tblSizes->rowCount() == 0),
                                "You have NOT created/imported any content rows into the universe/sample size table.");

     m_conditionLogger.addError((m_ui->m_tblData->columnCount() == 0),
                                "You have NOT created/imported any content columns into the data table.");

     m_conditionLogger.addError((m_ui->m_tblSizes->columnCount() == 0),
                                "You have NOT created/imported any content columns into the universe/sample size table.");

     m_conditionLogger.addWarning((!m_ui->m_chkCSVOutput->isChecked() && !m_ui->m_chkTextOutput->isChecked()),
                                "You have NOT selected an output file for the results.  Assuming screen display only.");

     m_conditionLogger.addWarning(m_ui->m_txtAuditName->text().isEmpty(),
                                  "You have not set the name for this audit.  Using auto-generated name: '"+m_ui->m_txtAuditName->placeholderText().toStdString()+"'");

     if (!m_conditionLogger.hasMessages())
     {
         m_ui->m_btnContinue->setEnabled(true);
         return true;
     }
     size_t index = 0;
     for(const std::string & message : m_conditionLogger.getMessages())
     {
         QListWidgetItem * item = new QListWidgetItem;
         item->setText(QString::fromStdString(message));
         if (m_conditionLogger.isError(index))
         {
             item->setIcon(m_iconError);
         }
         else if (m_conditionLogger.isWarning(index))
         {
             item->setIcon(m_iconWarning);
         }
         else
         {
             item->setIcon(m_iconOK);
         }
         ++index;
         m_ui->m_lstErrorConsole->addItem(item);
     }

     if (m_conditionLogger.hasError())
     {
         m_ui->m_btnContinue->setEnabled(false);
     }
     else m_ui->m_btnContinue->setEnabled(true);
     return false;
}

void UIRStatsSVA::onSampleSizeInputSheetSelected(const RStatsWorksheet &sheet)
{
    UIRStatsUtils::bindSheetToUI(sheet,m_ui->m_tblSizes,true);
    m_currentSizeSheet = sheet;
    onUpdateRowColumnExtentsForSizeTable();
}

void UIRStatsSVA::onSampleDataInputSheetSelected(const RStatsWorksheet &sheet)
{
    UIRStatsUtils::bindSheetToUI(sheet,m_ui->m_tblData,true);
    m_currentDataSheet = sheet;
    onUpdateRowColumnExtentsForDataTable();
}

void UIRStatsSVA::onComboSizeInputSheetSelected(int row)
{
    if (row < 0)
    {
        return;
    }
    size_t index = static_cast<size_t>(row);
    if (index < m_currentSizeWorkbook.getNumWorksheets())
    {
        onSampleSizeInputSheetSelected(m_currentSizeWorkbook(index));
    }
}

void UIRStatsSVA::onComboDataInputSheetSelected(int row)
{
    if (row < 0)
    {
        return;
    }
    size_t index = static_cast<size_t>(row);
    if (index < m_currentDataWorkbook.getNumWorksheets())
    {
        onSampleDataInputSheetSelected(m_currentDataWorkbook(index));
    }
}

void UIRStatsSVA::onUpdateClock()
{
    m_ui->m_lblDate->setText(QString::fromStdString(DateUtils::toCurrentShortDateString()));
    m_ui->m_lblTime->setText(QString::fromStdString(TimeUtils::toCurrent12HourTimeString()));
    onValidate();
}

void UIRStatsSVA::onContinue()
{
    onValidate();
    RStatsDataFormatTypeIndex dfIndex;
    if (m_ui->m_rdbAudited->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::Audit;
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbAuditedDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbDifference->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::Difference;
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbDifferenceDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbExamined->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::Examine;
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbExaminedDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbAuditedAndDifference->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::AuditAndDifference;
        dfIndex.secondaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbDifferenceDataTable->currentText().toStdString());
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbAuditedDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbExaminedAndDifference->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::ExamineAndDifference;
        dfIndex.secondaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbDifferenceDataTable->currentText().toStdString());
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbExaminedDataTable->currentText().toStdString());
    }
    else if (m_ui->m_rdbExaminedAndAudited->isChecked())
    {
        dfIndex.type = RStatsDataFormatType::ExamineAndAudit;
        dfIndex.secondaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbAuditedDataTable->currentText().toStdString());
        dfIndex.primaryIndex  = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbExaminedDataTable->currentText().toStdString());
    }

    size_t sizeSheetSampleColumn = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbSampleCountSizeTable->currentText().toStdString());
    size_t sizeSheetUniverseColumn = RStatsUtils::getColumnIndexFromLabel(m_ui->m_cmbUniverseCountSizeTable->currentText().toStdString());
    size_t sizeSheetRowDataStart = m_ui->m_cmbDataRowStartSizeTable->currentText().toInt();


    RStatsWorksheet worksheet;

    if (StringUtils::isEmpty(m_currentTextFileOutput))
    {
        FileUtils::writeFileContents(m_currentTextFileOutput,
                                     worksheet.toEvenlySpacedString());
    }

    if (StringUtils::isEmpty(m_currentCSVFileOutput))
    {
        FileUtils::writeFileContents(m_currentCSVFileOutput,
                                     worksheet.toCommaDelimitedString());
    }

}

void UIRStatsSVA::onExit()
{
    this->close();
}

void UIRStatsSVA::onImportDataInput()
{
    QString filename = QFileDialog::getOpenFileName(this,"Import Stratified Variable Appraisal Sample Input File...","","Input Files(*.dat *.csv *.txt *.xls *.xlsx)");
    if (!filename.isEmpty() && QFile::exists(filename))
    {
        m_ui->m_cmbDataInputSheets->clear();
        try
        {
            std::string filePath = filename.toStdString();
            m_currentDataWorkbook.load(filePath);
            if (m_currentDataWorkbook.getNumWorksheets() == 0)
            {
                THROW_GENERIC_EXCEPTION("No worksheets were found in \""+filePath+"\"")
            }
            m_ui->m_cmbDataInputSheets->setEnabled(true);
            bool setOther = false;
            if (m_currentSizeWorkbook.getNumWorksheets() == 0)
            {
                setOther = true;
                m_currentSizeWorkbook = m_currentSizeWorkbook;
            }

            std::vector<std::string> worksheetNames = m_currentDataWorkbook.getWorksheetNames();
            if (setOther)
            {
                m_ui->m_cmbSizeInputSheets->clear();
                m_ui->m_cmbSizeInputSheets->setEnabled(true);
            }
            for(const auto& sheetName : worksheetNames)
            {
                if (setOther)
                {
                    m_ui->m_cmbSizeInputSheets->addItem(QString::fromStdString(sheetName));
                }
                m_ui->m_cmbDataInputSheets->addItem(QString::fromStdString(sheetName));
            }
            onUpdateRowColumnExtentsForDataTable();
        }                        
        catch(const std::exception& exception)
        {
            m_ui->m_cmbDataInputSheets->addItem("No Sheets Available");
            m_ui->m_cmbDataInputSheets->setEnabled(false);
            QString title = "Error occured trying to import " + filename;
            QString message = QString(exception.what());
            UIRStatsErrorMessage(title,message).exec();
            return;
        }
    }
}

void UIRStatsSVA::onImportSizeInput()
{
    QString filename = QFileDialog::getOpenFileName(this,"Import Stratified Variable Appraisal Universe/Sample Size Input File...","","Input Files(*.dat *.csv *.txt *.xls *.xlsx)");
    if (!filename.isEmpty() && QFile::exists(filename))
    {
        m_ui->m_cmbSizeInputSheets->clear();
        try
        {
            std::string filePath = filename.toStdString();
            m_currentSizeWorkbook.load(filePath);
            if (m_currentSizeWorkbook.getNumWorksheets() == 0)
            {
                THROW_GENERIC_EXCEPTION("No worksheets were found in \""+filePath+"\"")
            }
            m_ui->m_cmbSizeInputSheets->setEnabled(true);
            bool setOther = false;
            if (m_currentDataWorkbook.getNumWorksheets() == 0)
            {
                setOther = true;
                m_currentDataWorkbook = m_currentSizeWorkbook;
            }

            std::vector<std::string> worksheetNames = m_currentSizeWorkbook.getWorksheetNames();

            if (setOther)
            {
                m_ui->m_cmbDataInputSheets->clear();
                m_ui->m_cmbDataInputSheets->setEnabled(true);
            }

            for(const auto& sheetName : worksheetNames)
            {
                if (setOther)
                {
                    m_ui->m_cmbDataInputSheets->addItem(QString::fromStdString(sheetName));
                }
                m_ui->m_cmbSizeInputSheets->addItem(QString::fromStdString(sheetName));
            }
            onUpdateRowColumnExtentsForSizeTable();
        }
        catch(const std::exception& exception)
        {
            m_ui->m_cmbSizeInputSheets->addItem("No Sheets Available");
            m_ui->m_cmbSizeInputSheets->setEnabled(false);
            QString title = "Error occured trying to import " + filename;
            QString message = QString(exception.what());
            UIRStatsErrorMessage(title,message).exec();
            return;
        }        
    }
}

void UIRStatsSVA::onHelp()
{

}

void UIRStatsSVA::onSaveCSVFile()
{
    m_currentCSVFileOutput = UIRStatsUtils::setOutputFile(m_ui->m_chkCSVOutput,
                                                   "Save to CSV file...",
                                                   "*.csv");
}

void UIRStatsSVA::onSaveTextFile()
{
    m_currentTextFileOutput = UIRStatsUtils::setOutputFile(m_ui->m_chkTextOutput,
                              "Save to Text file...",
                              "*.txt");
}


void UIRStatsSVA::onSetStratum(int count)
{
    size_t rowCount = m_ui->m_tblSizes->rowCount();
    if (count < rowCount)
    {

    }
}

void UIRStatsSVA::onUpdateDataFormatSelection()
{
    m_ui->m_cmbAuditedDataTable->setEnabled(false);
    m_ui->m_cmbExaminedDataTable->setEnabled(false);
    m_ui->m_cmbDifferenceDataTable->setEnabled(false);
    if (m_ui->m_rdbAudited->isChecked())
    {
        m_ui->m_cmbAuditedDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbDifference->isChecked())
    {
        m_ui->m_cmbDifferenceDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbExamined->isChecked())
    {
        m_ui->m_cmbExaminedDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbAuditedAndDifference->isChecked())
    {
        m_ui->m_cmbDifferenceDataTable->setEnabled(true);
        m_ui->m_cmbAuditedDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbExaminedAndDifference->isChecked())
    {
        m_ui->m_cmbDifferenceDataTable->setEnabled(true);
        m_ui->m_cmbExaminedDataTable->setEnabled(true);
    }
    else if (m_ui->m_rdbExaminedAndAudited->isChecked())
    {
        m_ui->m_cmbAuditedDataTable->setEnabled(true);
        m_ui->m_cmbExaminedDataTable->setEnabled(true);
    }
}

}}}}//end namespace

