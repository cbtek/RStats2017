/*
    UIRStatsUAA.cpp
    

*/
//UIRStatsUAA.cpp generated by snow on 02-05-2017 at 08:52:17 PM

#include "UIRStatsUAA.h"
#include "ui_UIRStatsUAA.h"

#include "RStatsUAA.h"

#include <QFileDialog>
#include <QMessageBox>
#include <QDesktopServices>
#include <QFile>
#include <QListWidgetItem>

#include "rstats_ui/inc/UIRStatsAbout.h"
#include "rstats_ui/inc/UIRStatsUtils.hpp"
#include "rstats_ui/inc/UIRStatsErrorMessage.h"

#include "utility/inc/DateTimeUtils.hpp"
#include "utility/inc/XMLUtils.h"

using namespace cbtek::common::utility;
using namespace oig::ratstats::ui;
using namespace oig::ratstats::utils;

namespace oig {
namespace ratstats {
namespace modules {
namespace uaa {

UIRStatsUAA::UIRStatsUAA(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui_UIRStatsUAA)
{
    m_ui->setupUi(this);
    m_ui->m_dockOptions->setTitleBarWidget(new QWidget());


    //Load icons used by validation console
    m_iconError = UIRStatsUtils::getIcon("img_error.png");
    m_iconWarning = UIRStatsUtils::getIcon("img_warning.png");
    m_iconOK = UIRStatsUtils::getIcon("img_ok.png");

    //Initialize all buttons and menu items
    UIRStatsUtils::initButton(m_ui->m_btnExecute, "img_run.png");
    UIRStatsUtils::initButton(m_ui->m_btnExit, "img_exit.png");
    UIRStatsUtils::initButton(m_ui->m_btnHelp, "img_help.png");
    UIRStatsUtils::initAction(m_ui->actionAbout,"img_about.png","Alt+A");
    UIRStatsUtils::initAction(m_ui->actionExecute,"img_run.png","Alt+R");
    UIRStatsUtils::initAction(m_ui->actionExit,"img_exit.png","Alt+Q");
    UIRStatsUtils::initAction(m_ui->actionHelp,"img_help.png","Alt+H");
    UIRStatsUtils::initAction(m_ui->actionRecentlyUsed,"img_clock.png","Alt+S");

    //bind all UI events to the functions that handle them
    connect(m_ui->actionExecute,SIGNAL(triggered(bool)),this,SLOT(onExecute()));
    connect(m_ui->actionExit,SIGNAL(triggered(bool)),this,SLOT(onExit()));
    connect(m_ui->actionHelp,SIGNAL(triggered(bool)),this,SLOT(onHelp()));
    connect(m_ui->actionAbout,SIGNAL(triggered(bool)),this,SLOT(onAbout()));
    connect(m_ui->m_btnExecute,SIGNAL(clicked()),this,SLOT(onExecute()));
    connect(m_ui->m_btnExit,SIGNAL(clicked()),this,SLOT(onExit()));
    connect(m_ui->m_btnHelp,SIGNAL(clicked()),this,SLOT(onHelp()));
    connect(m_ui->m_chkCSVOutput,SIGNAL(toggled(bool)),this,SLOT(onSaveCSVFile()));
    connect(m_ui->m_chkTextOutput,SIGNAL(toggled(bool)),this,SLOT(onSaveTextFile()));
    connect(&m_clock,SIGNAL(timeout()),this,SLOT(onUpdateClock()));
    connect(m_ui->m_spnSampleSize,SIGNAL(valueChanged(int)),this,SLOT(onValidate()));
    connect(m_ui->m_spnUniverseSize,SIGNAL(valueChanged(int)),this,SLOT(onValidate()));
    connect(m_ui->m_spnCOI,SIGNAL(valueChanged(int)),this,SLOT(onValidate()));


    //Set the status bar output labels to null
    m_currentCSVFileOutputLabel = nullptr;
    m_currentTextFileOutputLabel = nullptr;

    //Set auto save flag to false
    m_autoSetFileOutput = false;

    //Initialize audit name with default text
    m_ui->m_txtAuditName->setPlaceholderText(QString::fromStdString(RStatsUtils::getAuditName()));

    //Hide the output frame since there is no data
    m_ui->m_frmOutput->hide();        

    //Update the recently used items
    updateRecentSessions();

    //Start the clock that checks validation
    m_clock.start(1000);

    //Start initial validation
    onValidate();
}

UIRStatsUAA::~UIRStatsUAA()
{
    delete m_ui;
}

void UIRStatsUAA::onUpdateSampleCount()
{
    m_ui->m_spnCOI->setMaximum(m_ui->m_spnSampleSize->value());
}

void UIRStatsUAA::onUpdateUniverseCount()
{
    m_ui->m_spnSampleSize->setMaximum(m_ui->m_spnUniverseSize->value());
}

void UIRStatsUAA::onHelp()
{
    UIRStatsUtils::launchHelp("rstats_user_uaa.pdf");
}

void UIRStatsUAA::onAbout()
{
    UIRStatsAbout().exec();
}

bool UIRStatsUAA::onValidate()
{
    m_conditionLogger.clear();
    m_ui->m_lstValidationConsole->clear();

    //Define list of conditions for condition logger
     m_conditionLogger.addError((m_ui->m_spnCOI->value() > m_ui->m_spnSampleSize->value()),
                                "The number of items with characteristics of interest (COI) must be less than the sample size.");

     m_conditionLogger.addError((m_ui->m_spnSampleSize->value() > m_ui->m_spnUniverseSize->value()),
                                "The sample size must be less than the universe size.");

     m_conditionLogger.addWarning((!m_ui->m_chkCSVOutput->isChecked() && !m_ui->m_chkTextOutput->isChecked()),
                                "You have NOT selected an output file for the results.  Assuming screen display only.");

     m_conditionLogger.addWarning(m_ui->m_txtAuditName->text().isEmpty(),
                                  "You have NOT set the name for this audit.  Using auto-generated name: '"+m_ui->m_txtAuditName->placeholderText().toStdString()+"'");

     //Check if any conditions passed
    if (!m_conditionLogger.hasMessages())
    {
        m_ui->m_dockValidationConsole->hide();
        m_ui->m_btnExecute->setEnabled(true);
        m_ui->actionExecute->setEnabled(true);
        return true;
    }
    else
    {
        m_ui->m_dockValidationConsole->show();
        m_ui->m_lstValidationConsole->setVisible(true);
    }


    //Loop over condition messages and populate listbox in validation console
     size_t index = 0;
     for(const std::string & message : m_conditionLogger.getMessages())
     {
         QListWidgetItem * item = new QListWidgetItem;
         item->setText(QString::fromStdString(message));
         if (m_conditionLogger.isError(index))
         {
             item->setIcon(m_iconError);
         }
         else if (m_conditionLogger.isWarning(index))
         {
             item->setIcon(m_iconWarning);
         }
         else
         {
             item->setIcon(m_iconOK);
         }
         ++index;
         m_ui->m_lstValidationConsole->addItem(item);
     }

     if (m_conditionLogger.hasError())
     {
         m_ui->m_btnExecute->setEnabled(false);
         m_ui->actionExecute->setEnabled(false);
         return false;
     }
     else
     {
         m_ui->m_btnExecute->setEnabled(true);
         m_ui->actionExecute->setEnabled(true);
         return true;
     }
}

void UIRStatsUAA::onUpdateClock()
{
    onValidate();
}

void UIRStatsUAA::onExecute()
{
    if (!onValidate())
    {
        return;
    }

    try
    {

        //Grab the values from the UI
        RStatsInteger sampleSize = m_ui->m_spnSampleSize->value();
        RStatsInteger universeSize = m_ui->m_spnUniverseSize->value();
        RStatsInteger coiSize = m_ui->m_spnCOI->value();

        //Grab the name of the audit
        std::string name = m_ui->m_txtAuditName->text().toStdString();
        if (StringUtils::trimmed(name).empty())
        {
            name = m_ui->m_txtAuditName->placeholderText().toStdString();
        }

        //Determine two-sided or one-sided interval type
        RStatsUAAConfidenceIntervalType type = RStatsUAAConfidenceIntervalType::TwoSided;
        if (coiSize == 0 || coiSize == sampleSize)
        {
            int answer = QMessageBox::question(this,"One or Two sided confidence?","Would you like to compute a one-sided confidence interval?");
            if (answer == QMessageBox::Yes)
            {
                type = (coiSize == 0) ? RStatsUAAConfidenceIntervalType::OneSidedUpper : RStatsUAAConfidenceIntervalType::OneSidedLower;
            }
        }

        //Execute the unrestricted attribute appraisal function
        RStatsUAA::inst().execute(name,sampleSize,universeSize,coiSize,type);

        //Save output to a worksheet
        RStatsWorksheet output;
        RStatsUAA::inst().saveToWorksheet(output);        

        //Save CSV file (for Excel/Access) if applicable
        if (m_ui->m_chkCSVOutput->isChecked())
        {
            FileUtils::writeFileContents(m_currentCSVFileOutput.toStdString(),
                                         output.toCommaDelimitedString());
        }

        //Save Text file, if applicable
        if (m_ui->m_chkTextOutput->isChecked())
        {
            FileUtils::writeFileContents(m_currentTextFileOutput.toStdString(),
                                         output.toEvenlySpacedString());
        }

        m_ui->m_frmOutput->show();
        m_ui->m_lblNoData->hide();
        m_ui->m_txtOutput->setHtml(QString::fromStdString(output.toHTMLTableString()));

        //Save the session data
        RStatsUAASessionData sessionData = getSessionData();
        sessionData.setCreationDate(DateUtils::getCurrentDate());
        sessionData.setCreationTime(TimeUtils::getCurrentTime());
        m_recentSessionsMap[sessionData.getAuditName()] = RStatsModuleSessionDataPtr(new RStatsUAASessionData(sessionData));
        RStatsUtils::saveRecentSession(m_recentSessionsMap[sessionData.getAuditName()]);
        updateRecentSessions();

        //Show results in browser if selected
        if (m_ui->m_chkViewInBrowser->isChecked())
        {
            std::string htmlPath = FileUtils::buildFilePath(SystemUtils::getUserTempDirectory(), FileUtils::getRandomFileName(10,0)+".html");
            FileUtils::writeFileContents(htmlPath,output.toHTMLTableString());
            QDesktopServices::openUrl(QString::fromStdString(htmlPath));
        }
    }
    catch (std::exception& e)
    {
        UIRStatsErrorMessage("Error occured while executing \""+this->windowTitle().toStdString()+"\"",
                             std::string(e.what()),false,this).exec();
        return;
    }
}

void UIRStatsUAA::onExit()
{
    this->close();
}

RStatsUAASessionData UIRStatsUAA::getSessionData() const
{

    QString text = m_ui->m_txtAuditName->text();
    if (text.isEmpty())
    {
        text = m_ui->m_txtAuditName->placeholderText();
    }
    RStatsUAASessionData data;
    data.setAuditName(text.toStdString());
    data.setSampleSize(m_ui->m_spnSampleSize->value());
    data.setCoiSize(m_ui->m_spnCOI->value());
    data.setUniverseSize(m_ui->m_spnUniverseSize->value());
    data.setCSVOutputFile(m_currentCSVFileOutput.toStdString());
    data.setTextOutputFile(m_currentTextFileOutput.toStdString());
    data.setViewInBrowserFlag(m_ui->m_chkViewInBrowser->isChecked());
    return data;
}

void UIRStatsUAA::setSessionData(const RStatsUAASessionData &data)
{
    m_ui->m_txtAuditName->setText(QString::fromStdString(data.getAuditName()));
    m_ui->m_spnSampleSize->setValue(static_cast<int>(data.getSampleSize()));
    m_ui->m_spnCOI->setValue(static_cast<int>(data.getCoiSize()));
    m_ui->m_spnUniverseSize->setValue(static_cast<int>(data.getUniverseSize()));
    m_ui->m_chkViewInBrowser->setChecked(data.isViewableInBrowser());
    m_autoSetFileOutput = true;
    if (!data.getCSVOutputFile().empty())
    {        
        m_ui->m_chkCSVOutput->setChecked(true);
        setCSVFileOutput(data.getTextOutputFile());
        m_ui->m_chkCSVOutput->setToolTip(QString::fromStdString(data.getCSVOutputFile()));
    }
    if (!data.getTextOutputFile().empty())
    {
        m_ui->m_chkTextOutput->setChecked(true);
        setTextFileOutput(data.getTextOutputFile());
        m_ui->m_chkTextOutput->setToolTip(QString::fromStdString(data.getTextOutputFile()));     
    }
    m_autoSetFileOutput = false;
}

void UIRStatsUAA::onClearRecentSessions()
{
    RStatsUtils::clearRecentSessions(c_RECENT_SESSION_EXTENSION);
    updateRecentSessions();
}

void UIRStatsUAA::onSaveTextFile()
{
    if (m_autoSetFileOutput) return;
    if (m_ui->m_chkTextOutput->isChecked())
    {
        m_currentTextFileOutput = UIRStatsUtils::setOutputFile(
                                                               m_ui->m_chkTextOutput,
                                                               "Save to Text file...",
                                                               "*.txt");
        setTextFileOutput(m_currentTextFileOutput.toStdString());
    }
    else m_ui->m_statusBar->removeWidget(m_currentTextFileOutputLabel);

}

void UIRStatsUAA::onSaveCSVFile()
{
    if (m_autoSetFileOutput) return;
    if (m_ui->m_chkCSVOutput->isChecked())
    {
        m_currentCSVFileOutput = UIRStatsUtils::setOutputFile(
                                                              m_ui->m_chkCSVOutput,
                                                              "Save to CSV file...",
                                                              "*.csv");
        setCSVFileOutput(m_currentCSVFileOutput.toStdString());
    }
    else m_ui->m_statusBar->removeWidget(m_currentCSVFileOutputLabel);
}

void UIRStatsUAA::onRecentSessionSelected(QAction* action)
{
    std::string name = action->property("name").toString().toStdString();
    if (m_recentSessionsMap.count(name))
    {
        RStatsUAASessionData * data = dynamic_cast<RStatsUAASessionData*>(m_recentSessionsMap[name].get());
        setSessionData(*data);
    }
    onValidate();
}

void UIRStatsUAA::updateRecentSessions()
{
    std::pair<QActionGroup*,QAction*> actionPair=UIRStatsUtils::buildRecentSessions<RStatsUAASessionData>(
                                                 this,
                                                 m_ui->actionRecentlyUsed,
                                                 this->m_recentSessionsMap,
                                                 c_RECENT_SESSION_EXTENSION);


    if (actionPair.first && actionPair.second)
    {
        connect(actionPair.first,SIGNAL(triggered(QAction*)),this,SLOT(onRecentSessionSelected(QAction*)));
        connect(actionPair.second,SIGNAL(triggered(bool)),this,SLOT(onClearRecentSessions()));
    }

}
void UIRStatsUAA::setTextFileOutput(const std::string& textFile)
{
    m_currentTextFileOutput = QString::fromStdString(textFile);
    if (!m_currentTextFileOutput.isEmpty())
    {
        if (m_currentTextFileOutputLabel == nullptr)
        {
            m_currentTextFileOutputLabel = new QLabel;
            m_currentTextFileOutputLabel->setStyleSheet("QLabel{padding:2px;border-radius:5px;background:#AAAAFF;color:#000000;border:1px solid grey;}");

        }
        m_ui->m_statusBar->removeWidget(m_currentTextFileOutputLabel);

        m_currentTextFileOutputLabel->setToolTip(m_currentTextFileOutput);
        QString text = "<b>Text File:</b> "+m_currentTextFileOutput;
        QFontMetrics metrics(this->font());
        QString elidedText = metrics.elidedText(text, Qt::ElideMiddle, this->width() / 2);
        m_currentTextFileOutputLabel->setText(elidedText);

        m_ui->m_statusBar->addPermanentWidget(m_currentTextFileOutputLabel);
        m_currentTextFileOutputLabel->show();
    }
    else m_ui->m_statusBar->removeWidget(m_currentTextFileOutputLabel);
}

void UIRStatsUAA::setCSVFileOutput(const std::string& csvFile)
{
    m_currentCSVFileOutput = QString::fromStdString(csvFile);
    if (!m_currentCSVFileOutput.isEmpty())
    {
        if (m_currentCSVFileOutputLabel == nullptr)
        {
            m_currentCSVFileOutputLabel = new QLabel;
            m_currentCSVFileOutputLabel->setStyleSheet("QLabel{padding:2px;border-radius:5px;background:#AAFFFF;color:#000000;border:1px solid grey;}");
        }
        m_ui->m_statusBar->removeWidget(m_currentCSVFileOutputLabel);
        m_currentCSVFileOutputLabel->setToolTip(m_currentCSVFileOutput);
        QString text = "<b>CSV File:</b> "+m_currentCSVFileOutput;
        QFontMetrics metrics(this->font());
        QString elidedText = metrics.elidedText(text, Qt::ElideMiddle, this->width() / 2);
        m_currentCSVFileOutputLabel->setText(elidedText);

        m_ui->m_statusBar->addPermanentWidget(m_currentCSVFileOutputLabel);
        m_currentCSVFileOutputLabel->show();
    }
    else m_ui->m_statusBar->removeWidget(m_currentCSVFileOutputLabel);
}


void UIRStatsUAA::resizeEvent(QResizeEvent *)
{
    if (m_currentCSVFileOutputLabel)
    {
        setCSVFileOutput(m_currentCSVFileOutput.toStdString());
    }
    if (m_currentTextFileOutputLabel)
    {
        setTextFileOutput(m_currentTextFileOutput.toStdString());
    }
}


}}}}//end namespace

