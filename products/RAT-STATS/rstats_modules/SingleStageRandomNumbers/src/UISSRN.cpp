/*
    UISSRN.cpp
    

*/
//UISSRN.cpp generated by CBTek Solutions on 01-27-2017 at 11:40:27 AM

#include "UISSRN.h"
#include "ui_UISSRN.h"
#include "RStatsSSRN.h"

#include "rstats_utils/inc/RStatsSettingsManager.h"
#include "rstats_ui/inc/UIRStatsUtils.h"

#include "utility/inc/TimeUtils.hpp"
#include "utility/inc/XMLReader.h"
#include "utility/inc/FileUtils.hpp"
#include "utility/inc/SystemUtils.hpp"

#include <QFileDialog>
#include <QFile>

using namespace cbtek::common::utility;

using namespace oig::ratstats::ui;
using namespace oig::ratstats::utils;

namespace oig {
namespace ratstats {
namespace ssrn {

UISSRN::UISSRN(QWidget *parent) :
    QDialog(parent),
    m_ui(new Ui_UISSRN)
{
    m_ui->setupUi(this);
    connect(m_ui->m_btnExit,SIGNAL(clicked(bool)),this,SLOT(onExit()));
    connect(m_ui->m_btnGenerate,SIGNAL(clicked(bool)),this,SLOT(onGenerate()));
    connect(m_ui->m_btnHelp,SIGNAL(clicked(bool)),this,SLOT(onHelp()));
    connect(m_ui->m_btnBrowse,SIGNAL(clicked(bool)),this,SLOT(onBrowse()));
    connect(m_ui->m_spnHighNumber,SIGNAL(valueChanged(int)),this,SLOT(onValidateForm()));
    connect(m_ui->m_spnLowNumber,SIGNAL(valueChanged(int)),this,SLOT(onValidateForm()));
    connect(m_ui->m_spnSpares,SIGNAL(valueChanged(int)),this,SLOT(onValidateForm()));
    connect(m_ui->m_spnOrder,SIGNAL(valueChanged(int)),this,SLOT(onValidateForm()));

    m_ui->m_tblOutput->hide();
    m_ui->m_spnSeed->setMaximum(std::numeric_limits<double>::max());
    m_ui->m_spnSeed->setMinimum(std::numeric_limits<double>::min());
    m_ui->m_spnSeed->setValue(TimeUtils::getMillisecondsNow());

    m_ui->m_btnGenerate->setEnabled(false);

    int buttonHeight = 32;
    int fontSize = 10;
    QString selectedOutputPath=QString::fromStdString(SystemUtils::getUserHomeDirectory());

    try
    {
        SettingPtr fontSizeSetting = RStatsSettingsManager::inst().getSettingById("fntSize");
        SettingPtr buttonHeightSetting = RStatsSettingsManager::inst().getSettingById("btnHeight");
        SettingPtr outputPathSetting = RStatsSettingsManager::inst().getSettingById("txtOutput");


        fontSize = (dynamic_cast<NumericSetting*>(fontSizeSetting.get()))->value;
        buttonHeight = (dynamic_cast<NumericSetting*>(buttonHeightSetting.get()))->value;
        std::string outputPath = StringUtils::trimmed((dynamic_cast<PathBrowserSetting*>(outputPathSetting.get()))->value);
        if (outputPath.size() > 0 && FileUtils::fileExists(outputPath))
        {
            selectedOutputPath = QString::fromStdString(outputPath);
        }
    }
    catch(const std::exception& e)
    {

    }

    QFont font = this->font();
    font.setPointSize(fontSize);

    //initialize default icons
    m_ui->m_lblStatus->setText("Output Path: "+selectedOutputPath);
    QIcon iconEdit,iconHelp,iconModule,iconRun, iconFolder,iconRemove,iconExit,iconSettings,iconObject,iconAbout,iconAdd;
    std::string appDir = SystemUtils::getApplicationDirectory();
    iconFolder = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_folder.png")));
    iconModule = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_module.png")));
    iconEdit = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_edit.png")));
    iconHelp = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_help.png")));
    iconRemove = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_remove.png")));
    iconAdd = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_add.png")));
    iconExit = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_exit.png")));
    iconSettings = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_settings.png")));
    iconObject = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_object.png")));
    iconAbout = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_about.png")));
    iconRun = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_run.png")));


    m_ui->m_txtConsole->setLineWidth(32);

    onValidateForm();

    UIRStatsUtils::setButtonStyle(m_ui->m_btnBrowse,font,iconFolder,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnExit,font,iconExit,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnGenerate,font,iconRun,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnHelp,font,iconHelp,buttonHeight);

    setFont(font);
    m_ui->m_grpLog->setFont(font);
    m_ui->m_grpNumberingOptions->setFont(font);
    m_ui->m_grpOutputOptions->setFont(font);
    m_ui->m_grpReviewName->setFont(font);
    m_ui->m_grpSeed->setFont(font);
    QList<int> sizes;
    sizes << 300 << 500;
    m_ui->splitter->setSizes(sizes);
}

UISSRN::~UISSRN()
{
    delete m_ui;
}

void UISSRN::onValidateForm()
{
    m_logger.clear();
    m_ui->m_txtConsole->clear();
    std::int64_t low  = m_ui->m_spnLowNumber->value();
    std::int64_t high = m_ui->m_spnHighNumber->value();
    std::int64_t order= m_ui->m_spnOrder->value();
    std::int64_t spare= m_ui->m_spnSpares->value();

    m_logger.addError(((order + spare) == 0 ),
                      "The number of generated values must be greater than zero!");

    m_logger.addError(low > high,
                      "The low number is greater than or equal to the high number!");

    m_logger.addWarning(low == high,
                        "The low number is equal to the high number!");

    m_logger.addWarning((high - low)  < (order + spare),
                        "The sampling frame is less than the total number of values to be generated!");

    for(const std::string & message : m_logger.getMessages())
    {
        m_ui->m_txtConsole->append((QString::fromStdString(message)));
    }

    if (m_logger.hasError())
    {
        m_ui->m_btnGenerate->setEnabled(false);
    }
    else m_ui->m_btnGenerate->setEnabled(true);
}

void UISSRN::onGenerate()
{
    RStatsIntegerList items = RStatsSSRN::inst().generateRandomNumbers(m_ui->m_txtAuditName->text().toStdString(),
                                                                     m_ui->m_spnSeed->value(),
                                                                     m_ui->m_spnOrder->value(),
                                                                     m_ui->m_spnSpares->value(),
                                                                     m_ui->m_spnLowNumber->value(),
                                                                     m_ui->m_spnHighNumber->value());

    m_ui->m_tblOutput->clear();
    m_ui->m_tblOutput->setRowCount(items.size());
    m_ui->m_tblOutput->setColumnCount(1);
    m_ui->m_tblOutput->setHorizontalHeaderLabels(QStringList()<<"Value");
    for (size_t a2 = 0; a2 < items.size();++a2)
    {
        m_ui->m_tblOutput->setItem(a2,0,new QTableWidgetItem(QString::number(items(a2))));
    }
    m_ui->m_tblOutput->horizontalHeader()->setSectionResizeMode(0,QHeaderView::Stretch);
}

void UISSRN::onBrowse()
{
    QString dir = QFileDialog::getExistingDirectory(this,"Select Output Directory",m_currentOutputDirectory);
    if (!dir.trimmed().isEmpty())
    {
        m_currentOutputDirectory = dir;
        m_ui->m_lblStatus->setText(dir);
    }
}

void UISSRN::onHelp()
{

}

void UISSRN::onExit()
{
    this->close();
}
}}}//end namespace

