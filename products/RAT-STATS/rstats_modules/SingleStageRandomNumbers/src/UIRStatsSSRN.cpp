/*
    UIRStatsSSRN.cpp   
*/
//UIRStatsSSRN.cpp generated by CBTek Solutions on 02-23-2017 at 08:00:38 PM

#include "UIRStatsSSRN.h"
#include "ui_UIRStatsSSRN.h"

#include "RStatsSSRN.h"

#include "rstats_utils/inc/RStatsSettingsManager.h"
#include "rstats_ui/inc/UIRStatsUtils.h"

#include "utility/inc/DateTimeUtils.hpp"
#include "utility/inc/TimeUtils.hpp"
#include "utility/inc/XMLReader.h"
#include "utility/inc/FileUtils.hpp"
#include "utility/inc/SystemUtils.hpp"

#include <QFileDialog>
#include <QFile>

using namespace oig::ratstats::ui;
using namespace oig::ratstats::utils;

using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace modules {
namespace ssrn {

UIRStatsSSRN::UIRStatsSSRN(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui_UIRStatsSSRN)
{
    m_ui->setupUi(this);


    std::string sessionFolder = FileUtils::buildFilePath(SystemUtils::getUserAppDirectory(),".rstats");
    if (!FileUtils::isDirectory(sessionFolder))
    {
        FileUtils::createDirectory(sessionFolder);
    }

    connect(m_ui->m_btnExit,SIGNAL(clicked(bool)),this,SLOT(onExit()));
    connect(m_ui->m_btnGenerate,SIGNAL(clicked(bool)),this,SLOT(onGenerate()));
    connect(m_ui->m_btnHelp,SIGNAL(clicked(bool)),this,SLOT(onHelp()));
    connect(m_ui->m_spnHighNumber,SIGNAL(valueChanged(int)),this,SLOT(onValidateForm()));
    connect(m_ui->m_spnLowNumber,SIGNAL(valueChanged(int)),this,SLOT(onValidateForm()));
    connect(m_ui->m_spnSpares,SIGNAL(valueChanged(int)),this,SLOT(onValidateForm()));
    connect(m_ui->m_spnOrder,SIGNAL(valueChanged(int)),this,SLOT(onValidateForm()));
    connect(m_ui->m_chkAccessExcelOutput,SIGNAL(clicked(bool)),this,SLOT(onSaveAccessExcelFile()));
    connect(m_ui->m_chkTextOutput,SIGNAL(clicked(bool)),this,SLOT(onSaveTextFile()));
    connect(&m_clock,SIGNAL(timeout()),this,SLOT(onUpdateClock()));
    m_clock.start(1000);

    QString defaultAuditName = "NewAudit_"+QString::number(TimeUtils::getSecondsNow());

    m_ui->m_txtAuditName->setPlaceholderText(defaultAuditName);
    m_ui->m_grpOutput->hide();
    m_ui->m_line->hide();
    m_ui->m_frmTotals->hide();

    m_ui->m_spnSeed->setMaximum(std::numeric_limits<double>::max());
    m_ui->m_spnSeed->setMinimum(std::numeric_limits<double>::min());
    m_ui->m_spnSeed->setValue(TimeUtils::getMillisecondsNow());

    m_ui->m_btnGenerate->setEnabled(false);

    int buttonHeight = 32;
    int fontSize = 10;
    QString selectedOutputPath=QString::fromStdString(SystemUtils::getUserHomeDirectory());

    try
    {
        SettingPtr fontSizeSetting = RStatsSettingsManager::inst().getSettingById("fntSize");
        SettingPtr buttonHeightSetting = RStatsSettingsManager::inst().getSettingById("btnHeight");
        SettingPtr outputPathSetting = RStatsSettingsManager::inst().getSettingById("txtOutput");


        fontSize = (dynamic_cast<NumericSetting*>(fontSizeSetting.get()))->value;
        buttonHeight = (dynamic_cast<NumericSetting*>(buttonHeightSetting.get()))->value;
        std::string outputPath = StringUtils::trimmed((dynamic_cast<PathBrowserSetting*>(outputPathSetting.get()))->value);
        if (outputPath.size() > 0 && FileUtils::fileExists(outputPath))
        {
            selectedOutputPath = QString::fromStdString(outputPath);
        }
    }
    catch(const std::exception& e)
    {

    }

    QFont font = this->font();
    font.setPointSize(fontSize);

    //initialize default icons
    std::string appDir = SystemUtils::getCurrentExecutableDirectory();
    m_iconFolder = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_folder.png")));
    m_iconModule = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_module.png")));
    m_iconEdit = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_edit.png")));
    m_iconHelp = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_help.png")));
    m_iconRemove = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_remove.png")));
    m_iconAdd = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_add.png")));
    m_iconExit = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_exit.png")));
    m_iconSettings = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_settings.png")));
    m_iconObject = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_object.png")));
    m_iconAbout = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_about.png")));
    m_iconRun = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_run.png")));
    m_iconWarning = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_warning.png")));
    m_iconError = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_error.png")));
    m_iconOK = QIcon(QString::fromStdString(FileUtils::buildFilePath(appDir,"resx/img_ok.png")));

    QString qss = QString::fromStdString(FileUtils::getFileContents(FileUtils::buildFilePath(appDir,"resx/style.qss")));
    qApp->setStyleSheet(qss);

    onValidateForm();

    UIRStatsUtils::setButtonStyle(m_ui->m_btnExit,font,m_iconExit,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnGenerate,font,m_iconRun,buttonHeight);
    UIRStatsUtils::setButtonStyle(m_ui->m_btnHelp,font,m_iconHelp,buttonHeight);

    setFont(font);
    m_ui->m_grpLog->setFont(font);
    m_ui->m_grpNumberingOptions->setFont(font);
    m_ui->m_grpOutputOptions->setFont(font);
    m_ui->m_grpReviewName->setFont(font);
    m_ui->m_grpSeed->setFont(font);
    onLoadSessions();
}

UIRStatsSSRN::~UIRStatsSSRN()
{
    delete m_ui;
}

void UIRStatsSSRN::onSaveSession()
{

}

void UIRStatsSSRN::onSaveRecentSession()
{

}

void UIRStatsSSRN::onSaveSession(const std::string &sessionUrl)
{
    std::ostringstream out;
    out << "name="<<m_ui->m_txtAuditName->text().toStdString()<<std::endl;
    out << "seed="<<m_ui->m_spnSeed->value()<<std::endl;
    out << "order="<<m_ui->m_spnOrder->value()<<std::endl;
    out << "spares="<<m_ui->m_spnSpares->value()<<std::endl;
    out << "low="<<m_ui->m_spnLowNumber->value()<<std::endl;
    out << "high="<<m_ui->m_spnLowNumber->value()<<std::endl;
    FileUtils::writeFileContents(sessionUrl,out.str());
}

void UIRStatsSSRN::onLoadSessions()
{
    std::vector<std::string> sessionUrls,filters;
    std::string sessionFolder = FileUtils::buildFilePath(SystemUtils::getUserAppDirectory(),".rstats");

    filters.push_back("ssrn_session");
    FileUtils::getFileEntries(sessionFolder,
                              false,
                              filters,
                              sessionUrls);


    m_recentSessionActionGroup = new QActionGroup(this);
    connect(m_recentSessionActionGroup,SIGNAL(triggered(QAction*)),this,SLOT(onRecentSessionSelected(QAction*)));

    if (!sessionUrls.empty())
    {
        QMenu * recentMenu = new QMenu(m_ui->menuFile);
        for(const std::string& file : sessionUrls)
        {
            QAction * action = new QAction(QString::fromStdString(file), recentMenu);
            m_recentSessionActionGroup->addAction(action);
            recentMenu->addAction(action);
        }

        recentMenu->addSeparator();

        QAction * clearRecentSessionsAction = new QAction(recentMenu);
        clearRecentSessionsAction->setText("Clear History");
        connect(clearRecentSessionsAction,SIGNAL(triggered(bool)),this,SLOT(onClearRecentSessions()));
        recentMenu->addAction(clearRecentSessionsAction);
        m_ui->actionRecent->setMenu(recentMenu);
    }
    else
    {
        m_ui->actionRecent->setEnabled(false);
    }

}

void UIRStatsSSRN::onLoadSession(const std::string &sessionUrl)
{
    std::string contents = FileUtils::getFileContents(sessionUrl);
    std::vector<std::string> items = StringUtils::split(contents,"\n");
    for(const std::string& item : items)
    {
        std::pair<std::string,std::string> keyValue=StringUtils::splitKeyValue(item,"=");
        std::string key = StringUtils::toUpper(keyValue.first);
        if (key == "NAME")
        {
            m_ui->m_txtAuditName->setText(QString::fromStdString(keyValue.second));
        }
    }
//    std::ostringstream out;
//    out << "name="<<m_ui->m_txtAuditName->text().toStdString()<<std::endl;
//    out << "seed="<<m_ui->m_spnSeed->value()<<std::endl;
//    out << "order="<<m_ui->m_spnOrder->value()<<std::endl;
//    out << "spares="<<m_ui->m_spnSpares->value()<<std::endl;
//    out << "low="<<m_ui->m_spnLowNumber->value()<<std::endl;
//    out << "high="<<m_ui->m_spnLowNumber->value()<<std::endl;
    //FileUtils::writeFileContents(sessionUrl,out.str());
}

void UIRStatsSSRN::onClearRecentSessions()
{
    std::vector<std::string> sessionUrls,filters;
    std::string sessionFolder = FileUtils::buildFilePath(SystemUtils::getUserAppDirectory(),".rstats");

    filters.push_back("ssrn_session");
    FileUtils::getFileEntries(sessionFolder,
                              false,
                              filters,
                              sessionUrls);
    for (const std::string& sessionUrl : sessionUrls)
    {
        FileUtils::deleteFile(sessionUrl);
    }
    onLoadSessions();
}

void UIRStatsSSRN::onRecentSessionSelected(QAction *action)
{
    std::string sessionFolder = FileUtils::buildFilePath(SystemUtils::getUserAppDirectory(),".rstats");
    std::string sessionFile = FileUtils::buildFilePath(sessionFolder, action->text().toStdString());
    onLoadSession(sessionFile);
}

void UIRStatsSSRN::onValidateForm()
{
    m_logger.clear();
    m_ui->m_lstErrorConsole->clear();
    std::int64_t low  = m_ui->m_spnLowNumber->value();
    std::int64_t high = m_ui->m_spnHighNumber->value();
    std::int64_t order= m_ui->m_spnOrder->value();
    std::int64_t spare= m_ui->m_spnSpares->value();

    m_logger.addWarning(m_ui->m_txtAuditName->text().isEmpty(),
                        "You did not specify an audit name.  Using default.");

    m_logger.addError(((order + spare) == 0 ),
                      "The number of generated values must be greater than zero!");

    m_logger.addError(low > high,
                      "The low number is greater than or equal to the high number!");

    m_logger.addWarning(low == high,
                        "The low number is equal to the high number!");

    m_logger.addWarning((high - low)  < (order + spare),
                        "The sampling frame is less than the total number of values to be generated!");

    size_t index = 0;
    for(const std::string & message : m_logger.getMessages())
    {
        QListWidgetItem * item = new QListWidgetItem;
        item->setText(QString::fromStdString(message));
        item->setForeground(QBrush(Qt::black));
        if (m_logger.isError(index))
        {
            item->setIcon(m_iconError);
        }
        else if (m_logger.isWarning(index))
        {
            item->setIcon(m_iconWarning);
        }
        else
        {
            item->setIcon(m_iconOK);
        }
        ++index;
        m_ui->m_lstErrorConsole->addItem(item);
    }

    if (m_logger.hasError())
    {
        m_ui->m_btnGenerate->setEnabled(false);
    }
    else m_ui->m_btnGenerate->setEnabled(true);
}

void UIRStatsSSRN::onSaveAccessExcelFile()
{
    QString file = QFileDialog::getSaveFileName(this,"Save to Access/Excel CSV File...","","*.csv");

    if (FileUtils::fileExists(file.toStdString()))
    {
        m_currentAccessExcelFileOutput = file;
        m_ui->m_chkAccessExcelOutput->setToolTip(file);
    }
    else
    {
        m_ui->m_chkAccessExcelOutput->setChecked(false);
    }
}

void UIRStatsSSRN::onSaveTextFile()
{
    QString file = QFileDialog::getSaveFileName(this,"Save to Text File...","","*.txt");

    if (FileUtils::fileExists(file.toStdString()))
    {
        m_currentTextFileOutput = file;
        m_ui->m_chkTextOutput->setToolTip(file);
    }
    else
    {
        m_ui->m_chkTextOutput->setChecked(false);
    }
}

void UIRStatsSSRN::onUpdateClock()
{
    m_ui->m_lblTime->setText(QString::fromStdString(TimeUtils::to12HourTimeString(TimeUtils::getCurrentTime())));
    m_ui->m_lblDate->setText(QString::fromStdString(DateUtils::toShortDateString(DateUtils::getCurrentDate())));
}

void UIRStatsSSRN::onGenerate()
{

    onUpdateClock();
    RStatsIntegerList items = RStatsSSRN::inst().generateRandomNumbers(m_ui->m_txtAuditName->text().toStdString(),
                                                                     m_ui->m_spnSeed->value(),
                                                                     m_ui->m_spnOrder->value(),
                                                                     m_ui->m_spnSpares->value(),
                                                                     m_ui->m_spnLowNumber->value(),
                                                                     m_ui->m_spnHighNumber->value());

    m_ui->m_tblOutput->clear();
    m_ui->m_tblOutput->setRowCount(items.size());
    m_ui->m_tblOutput->setColumnCount(1);
    m_ui->m_tblOutput->setHorizontalHeaderLabels(QStringList()<<"Value");
    for (size_t a2 = 0; a2 < items.size();++a2)
    {
        m_ui->m_tblOutput->setItem(a2,0,new QTableWidgetItem(QString::number(items(a2))));
    }
    m_ui->m_tblOutput->horizontalHeader()->setSectionResizeMode(0,QHeaderView::Stretch);

    m_ui->m_grpOutput->show();
    m_ui->m_line->show();
    m_ui->m_frmTotals->show();
    m_ui->m_lblNoData->hide();
    m_ui->m_lblTotalRandomNumbersValue->setText(QString::number(m_ui->m_spnOrder->value()+m_ui->m_spnSpares->value()));
    m_ui->m_lblTotalFrameSizeValue->setText(QString::number(m_ui->m_spnHighNumber->value()-m_ui->m_spnLowNumber->value()));

    std::string sessionFolder = FileUtils::buildFilePath(SystemUtils::getUserAppDirectory(),".rstats");
    QString text = m_ui->m_txtAuditName->text();
    if (text.isEmpty())
    {
        text = m_ui->m_txtAuditName->placeholderText();
    }
    onSaveSession(FileUtils::buildFilePath(sessionFolder,text.toStdString()+".ssrn_session"));
    onLoadSessions();
    m_clock.stop();
}

void UIRStatsSSRN::onHelp()
{

}

void UIRStatsSSRN::onExit()
{
    this->close();
}
}}}}//end namespace

