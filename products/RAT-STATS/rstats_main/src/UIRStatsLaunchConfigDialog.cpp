/*
    UIRStatsLaunchConfigDialog.cpp
    

*/
//UIRStatsLaunchConfigDialog.cpp generated by sunefusion on 02-28-2017 at 09:25:06 PM

#include "UIRStatsLaunchConfigDialog.h"
#include "ui_UIRStatsLaunchConfigDialog.h"

#include <QFileDialog>
#include <QDir>
#include <QFile>
#include <QMessageBox>
#include <QProcess>

#include "rstats_utils/inc/RStatsUtils.hpp"
#include "utility/inc/FileUtils.hpp"
#include "utility/inc/SystemUtils.hpp"
#include "rstats_ui/inc/UIRStatsErrorMessage.h"


using namespace cbtek::common::utility;
using namespace oig::ratstats::utils;
using namespace oig::ratstats::ui;

namespace oig {
namespace ratstats {
namespace main {


UIRStatsLaunchConfigDialog::UIRStatsLaunchConfigDialog(const utils::RStatsModuleProperties &props, QWidget *parent) :
    QDialog(parent),
    m_ui(new Ui_UIRStatsLaunchConfigDialog)
{
    m_ui->setupUi(this);
    m_props = props;
    this->setWindowTitle(QString::fromStdString(props.getName())+" Launch Settings");
    onInit();
}

UIRStatsLaunchConfigDialog::~UIRStatsLaunchConfigDialog()
{
    delete m_ui;
}

void UIRStatsLaunchConfigDialog::onInit()
{
    m_ui->m_txtName->setText(QString::fromStdString(m_props.getName()));
    m_ui->m_cmbTypes->setCurrentText(QString::fromStdString(m_props.getType()));
    m_ui->m_txtLocation->setText(QString::fromStdString(m_props.getPath()));
    m_ui->m_txtWorkingDir->setText(QString::fromStdString(m_props.getWorkingDir()));
    m_ui->m_tblArgs->clear();
    m_ui->m_tblArgs->setHorizontalHeaderLabels(QStringList()<<"Flag"<<"Argument");

    std::vector<std::string> categories = RStatsUtils::getModuleCategories();
    m_ui->m_cmbTypes->clear();
    for (const auto& category : categories)
    {
        m_ui->m_cmbTypes->addItem(QString::fromStdString(category));
    }

    m_ui->m_cmbTypes->setCurrentText(QString::fromStdString(m_props.getCategory()));
    size_t row = 0;
    for(const auto& it : m_props.getArgs())
    {
        m_ui->m_tblArgs->setItem(row,0,new QTableWidgetItem(QString::fromStdString(it.first)));
        m_ui->m_tblArgs->setItem(row,1,new QTableWidgetItem(QString::fromStdString(it.second)));
        ++row;
    }

    connect(m_ui->m_btnSave,SIGNAL(clicked(bool)),this,SLOT(onSave()));
    connect(m_ui->m_btnCancel,SIGNAL(clicked(bool)),this,SLOT(onCancel()));
    connect(m_ui->m_btnLaunch,SIGNAL(clicked(bool)),this,SLOT(onLaunch()));
    connect(m_ui->m_btnBrowseLocation,SIGNAL(clicked(bool)),this,SLOT(onBrowseLocation()));
    connect(m_ui->m_btnBrowseWorkingDir,SIGNAL(clicked(bool)),this,SLOT(onBrowseWorkingDir()));
}

void UIRStatsLaunchConfigDialog::onSave()
{
    m_props.setName(m_ui->m_txtName->text().toStdString());
    m_props.setPath(m_ui->m_txtLocation->text().toStdString());
    m_props.setWorkingDir(m_ui->m_txtWorkingDir->text().toStdString());
    m_props.setType(m_ui->m_cmbTypes->currentText().toStdString());
    m_props.clearApplicationArgs();
    m_props.setCategory(m_ui->m_cmbTypes->currentText().toStdString());
    for (size_t a1 = 0;a1<m_ui->m_tblArgs->rowCount();++a1)
    {
        QString flag = m_ui->m_tblArgs->item(a1,0)->text();
        QString argument = m_ui->m_tblArgs->item(a1,1)->text();
        if (flag.isEmpty() && argument.isEmpty())
        {
            break;
        }
        m_props.addApplicationArg(flag.toStdString(),argument.toStdString());
    }    
    m_props.saveApplicationConfig();
    this->close();
}

void UIRStatsLaunchConfigDialog::onCancel()
{
    this->close();
}

void UIRStatsLaunchConfigDialog::onLaunch()
{
    std::string launcherPath = FileUtils::buildFilePath(SystemUtils::getApplicationDirectory(),"rstats_launcher");
    if (!FileUtils::fileExists(launcherPath))
    {        
        UIRStatsErrorMessage("Module Launch Error", "Can not launch this module.  Ensure that the module launcher (rstats_launcher) is installed.").exec();
        return;
    }

    QString command = QString::fromStdString(launcherPath+" --module-path \""+m_props.getDefinitionPath()+"\"");
    QProcess::startDetached(command);
    this->close();
}

void UIRStatsLaunchConfigDialog::onBrowseModulePath()
{
    QString file = QFileDialog::getOpenFileName(this,"Search for module file...","");
    if (QFile::exists(file))
    {
        m_props.setPath(file.toStdString());
    }
}

void UIRStatsLaunchConfigDialog::onBrowseModuleWorkingDir()
{
    QString dir = QFileDialog::getExistingDirectory(this,"Search for module working directory...");
    if (QDir(dir).exists())
    {
        m_props.setWorkingDir(dir.toStdString());
    }
}
}}}//end namespace

