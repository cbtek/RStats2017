/*
    UIRStatsSettingsManager.cpp
    

*/
//UIRStatsSettingsManager.cpp generated by CBTek Solutions on 02-03-2017 at 02:17:32 AM

#include "UIRStatsSettingsManager.h"

#include "ui_UIRStatsSettingsManager.h"

#include "utility/inc/StringUtils.hpp"

#include <QSpinBox>
#include <QLabel>
#include <QLineEdit>

using namespace oig::ratstats::utils;
using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace ui {

UIRStatsSettingsManager::UIRStatsSettingsManager(QWidget *parent) :
    QDialog(parent),
    m_ui(new Ui_UIRStatsSettingsManager)
{
    m_ui->setupUi(this);
    connect(m_ui->m_btnClose,SIGNAL(clicked(bool)),this,SLOT(onClose()));
    size_t count = 0;
    for (SettingPtr settingPtr : RStatsSettingsManager::inst().getSettings())
    {
        std::string type = StringUtils::toUpperTrimmed(settingPtr->type);
        QLabel * label = new QLabel;
        label->setText(QString::fromStdString(settingPtr->label)+":");
        label->setAlignment(Qt::AlignRight);
        m_ui->m_lytMain->addWidget(label,count,0);

        if (type == "NUMERIC")
        {
            NumericSetting * setting = dynamic_cast<NumericSetting*>(settingPtr.get());
            if (setting)
            {
                QSpinBox * widget = new QSpinBox;
                widget->setMinimum(setting->min);
                widget->setMaximum(setting->max);
                widget->setValue(setting->value);
                widget->setToolTip(QString::fromStdString(setting->description));
                m_settingsMap[count] = QPair<oig::ratstats::utils::SettingPtr,QWidget *>(settingPtr,widget);
                m_ui->m_lytMain->addWidget(widget,count,1);
            }
        }
        else if (type == "PATH_BROWSER")
        {
            PathBrowserSetting * setting = dynamic_cast<PathBrowserSetting*>(settingPtr.get());
            if (setting)
            {
                QLineEdit * widget = new QLineEdit;
                widget->setText(QString::fromStdString(setting->value));
                widget->setToolTip(QString::fromStdString(setting->description));
                m_settingsMap[count] = QPair<oig::ratstats::utils::SettingPtr,QWidget *>(settingPtr,widget);
                m_ui->m_lytMain->addWidget(widget,count,1);
            }
        }
        ++count;
    }
}

UIRStatsSettingsManager::~UIRStatsSettingsManager()
{
    delete m_ui;
}

void UIRStatsSettingsManager::onClose()
{
    std::vector<SettingPtr> settings;
    for(const auto& it : m_settingsMap.toStdMap())
    {
        QPair<oig::ratstats::utils::SettingPtr,QWidget *> settingPair = it.second;
        std::string type = StringUtils::toUpperTrimmed(settingPair.first->type);
        if (type == "NUMERIC")
        {
            NumericSetting * setting = dynamic_cast<NumericSetting*>(settingPair.first.get());
            if (setting)
            {
                QSpinBox * widget = dynamic_cast<QSpinBox*>(settingPair.second);
                if (widget)
                {
                    setting->value = widget->value();
                }
            }
            settings.push_back(std::make_shared<NumericSetting>(*setting));

        }
        else if (type == "PATH_BROWSER")
        {
            PathBrowserSetting * setting = dynamic_cast<PathBrowserSetting*>(settingPair.first.get());
            if (setting)
            {
                QLineEdit * widget = dynamic_cast<QLineEdit*>(settingPair.second);
                if (widget)
                {
                    setting->value = widget->text().toStdString();
                }
            }
            settings.push_back(std::make_shared<PathBrowserSetting>(*setting));
        }
    }
    RStatsSettingsManager::inst().setSettings(settings);
    RStatsSettingsManager::inst().writeSettings();
    this->close();
}
}}}//end namespace

