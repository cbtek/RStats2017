/*
    UIRStatsLaunchConfigDialog.cpp
    

*/
//UIRStatsLaunchConfigDialog.cpp generated by sunefusion on 02-28-2017 at 09:25:06 PM

#include "UIRStatsLaunchConfigDialog.h"
#include "ui_UIRStatsLaunchConfigDialog.h"

#include <QFileDialog>
#include <QDir>
#include <QFile>
#include <QMessageBox>
#include <QProcess>

#include "rstats_utils/inc/RStatsUtils.hpp"
#include "utility/inc/FileUtils.hpp"
#include "utility/inc/SystemUtils.hpp"

#include "rstats_ui/inc/UIRStatsErrorMessage.h"
#include "rstats_ui/inc/UIRStatsUtils.hpp"


using namespace cbtek::common::utility;
using namespace oig::ratstats::utils;
using namespace oig::ratstats::ui;

namespace oig {
namespace ratstats {
namespace ui {


UIRStatsLaunchConfigDialog::UIRStatsLaunchConfigDialog(const utils::RStatsModuleProperties &props, QWidget *parent) :
    QDialog(parent),
    m_ui(new Ui_UIRStatsLaunchConfigDialog)
{
    m_ui->setupUi(this);
    m_props = props;
    this->setWindowTitle(QString::fromStdString(props.getName())+" Launch Settings");
    m_isModified = false;


    UIRStatsUtils::customUISetup(m_ui->m_btnLaunch,
                                 m_ui->m_btnCancel,
                                 nullptr,
                                 m_ui->m_btnSetIcon,
                                 m_ui->m_btnBrowseLocation);

    m_ui->m_btnSave->setIcon(UIRStatsUtils::getIcon("img_ok.png"));
    onInit();

    //Setup signal/slot connections
    connect(m_ui->m_btnSave,SIGNAL(clicked(bool)),this,SLOT(onSave()));
    connect(m_ui->m_btnCancel,SIGNAL(clicked(bool)),this,SLOT(onCancel()));
    connect(m_ui->m_btnLaunch,SIGNAL(clicked(bool)),this,SLOT(onLaunch()));
    connect(m_ui->m_btnBrowseLocation,SIGNAL(clicked(bool)),this,SLOT(onBrowseModulePath()));
    connect(m_ui->m_btnSetIcon,SIGNAL(clicked(bool)),this,SLOT(onBrowseModuleIcon()));
}

UIRStatsLaunchConfigDialog::~UIRStatsLaunchConfigDialog()
{
    delete m_ui;
}

bool UIRStatsLaunchConfigDialog::launch()
{
    QDialog::exec();
    return m_isModified;
}

void UIRStatsLaunchConfigDialog::onInit()
{   
    m_ui->m_cmbCategories->clear();
    m_ui->m_cmbTypes->clear();
    m_ui->m_txtName->setText(QString::fromStdString(m_props.getName()));
    m_ui->m_cmbTypes->setCurrentText(QString::fromStdString(m_props.getType()));
    m_ui->m_txtLocation->setText(QString::fromStdString(m_props.getPath()));    
    m_ui->m_txtArgs->setText(QString::fromStdString(m_props.getArgs()));
    m_ui->m_chkShowConsole->setChecked(m_props.isConsoleShown());
    this->setWindowTitle("Module Properties Dialog");

    //Populate combobox with available categories
    std::vector<std::string> categories = RStatsUtils::getModuleCategories();
    m_ui->m_cmbCategories->clear();
    for (const auto& category : categories)
    {
        m_ui->m_cmbCategories->addItem(QString::fromStdString(category));
    }
    m_ui->m_cmbCategories->setCurrentText(QString::fromStdString(m_props.getCategory()));

    std::vector<RStatsScriptProviderProperties> scriptProps = RStatsUtils::getScriptProviderPropertiesList();
    m_ui->m_cmbTypes->clear();
    m_ui->m_cmbTypes->addItem(UIRStatsUtils::getIcon("img_terminal.png"),"Executable");
    for (const RStatsScriptProviderProperties& prop:scriptProps)
    {
        m_ui->m_cmbTypes->addItem(UIRStatsUtils::getIcon(prop.getIcon()),QString::fromStdString(prop.getName()));
    }

    //Grab icon for this module
    QIcon icon = UIRStatsUtils::getIcon(m_props.getIcon());
    if (!icon.isNull())
    {
        m_ui->m_btnSetIcon->setIcon(icon);
    }       
}

void UIRStatsLaunchConfigDialog::onSave()
{
    QString name = m_ui->m_txtName->text();
    if (name.isEmpty())
    {
        QMessageBox::information(this,"Empty field...","You must give this module a name.");
        m_ui->m_txtName->setFocus();
        return;
    }

    //Save property values and close
    m_props.setName(m_ui->m_txtName->text().toStdString());
    m_props.setPath(m_ui->m_txtLocation->text().toStdString());        
    m_props.setType(m_ui->m_cmbTypes->currentText().toStdString());    
    m_props.setCategory(m_ui->m_cmbCategories->currentText().toStdString());
    m_props.setArgs(m_ui->m_txtArgs->text().toStdString());
    m_props.setConsoleShown(m_ui->m_chkShowConsole->isChecked());
    m_props.saveConfig();        
    m_isModified = true;
    this->close();
}

void UIRStatsLaunchConfigDialog::onCancel()
{
    m_isModified = false;
    this->close();
}

void UIRStatsLaunchConfigDialog::onLaunch()
{
    std::string launcherPath = FileUtils::buildFilePath(SystemUtils::getCurrentExecutableDirectory(),"rstats_launcher");
    if (!FileUtils::fileExists(launcherPath))
    {        
        UIRStatsErrorMessage("Module Launch Error", "Can not launch this module.  Ensure that the module launcher (rstats_launcher) is installed.").exec();
        return;
    }

    QString command = QString::fromStdString(launcherPath+" --module-path \""+m_props.getDefinitionPath()+"\"");
    QProcess::startDetached(command);
    this->close();
}

void UIRStatsLaunchConfigDialog::onBrowseModulePath()
{
    QString file = QFileDialog::getOpenFileName(this,"Search for module file...","");
    if (QFile::exists(file))
    {
        m_props.setPath(file.toStdString());
        m_ui->m_txtLocation->setText(file);
        m_props.setWorkingDir(FileUtils::getDirPath(file.toStdString()));
    }
}

void UIRStatsLaunchConfigDialog::onBrowseModuleWorkingDir()
{
    QString dir = QFileDialog::getExistingDirectory(this,"Search for module working directory...");
    if (QDir(dir).exists())
    {
        m_props.setWorkingDir(dir.toStdString());                
    }
}

void UIRStatsLaunchConfigDialog::onBrowseModuleIcon()
{
    QString file = QFileDialog::getOpenFileName(this,"Search for module icon...","","Images (*.jpg *.png *.ico)");
    if (QFile::exists(file))
    {
        m_props.setIcon(file.toStdString());
        QIcon icon(file);
        m_ui->m_btnSetIcon->setIcon(icon);
    }
}
}}}//end namespace

