/*
    RStatsModuleSessionDataImpl.cpp
    

*/
//----------------------------------------
//RStatsModuleSessionDataImpl.cpp generated by cbtek on 03-31-2017 at 01:41:28 AM
//----------------------------------------
#include "RStatsModuleSessionDataImpl.h"

#include "utility/inc/StringUtils.hpp"

using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace utils {


RStatsModuleSessionDataImpl::RStatsModuleSessionDataImpl()
{
    m_viewInBrowser = false;
}

std::string RStatsModuleSessionDataImpl::getSessionId() const
{
    return m_sessionId;
}

RStatsModuleSessionDataImpl::~RStatsModuleSessionDataImpl()
{

}

void RStatsModuleSessionDataImpl::save(XMLStreamWriter& xml)
{
    xml.writeTextElement("csvOutput",this->getCSVOutputFile());
    xml.writeTextElement("xlsOutput",this->getXLSOutputFile());
    xml.writeTextElement("txtOutput",this->getTextOutputFile());
    xml.writeTextElement("name",this->getAuditName());
    xml.writeTextElement("date",StringUtils::toString(this->getCreationDate().toDateInteger()));
    xml.writeTextElement("time",StringUtils::toString(this->getCreationTime().toTimeInteger()));
    xml.writeTextElement("viewInBrowser",StringUtils::toString(m_viewInBrowser));
    if (m_sessionId.empty())
    {
        m_sessionId = StringUtils::createUUID();
    }
    xml.writeTextElement("sessionId",m_sessionId);

}

void RStatsModuleSessionDataImpl::load(XMLDataElement* element)
{
    setXLSOutputFile(element->getChildElementData("xlsOutput"));
    setCSVOutputFile(element->getChildElementData("csvOutput"));
    setTextOutputFile(element->getChildElementData("txtOutput"));
    setAuditName(element->getChildElementData("name"));
    setCreationDate(DateEntity(element->getChildElementDataAsType<std::uint64_t>("date")));
    setCreationTime(TimeEntity(element->getChildElementDataAsType<std::uint64_t>("time")));
    setViewInBrowserFlag(element->getChildElementDataAsType<bool>("viewInBrowser"));
    m_sessionId = StringUtils::trimmed(element->getChildElementData("sessionId"));

    if (m_sessionId.empty())
    {
        m_sessionId = StringUtils::createUUID();
    }
}

void RStatsModuleSessionDataImpl::setCreationDate(const cbtek::common::utility::DateEntity & value)
{
    m_creationDate=value;
}

void RStatsModuleSessionDataImpl::setCreationTime(const cbtek::common::utility::TimeEntity & value)
{
    m_creationTime=value;
}

void RStatsModuleSessionDataImpl::setCSVOutputFile(const std::string & value)
{
    m_csvOutputFile=value;
}

void RStatsModuleSessionDataImpl::setXLSOutputFile(const std::string &value)
{
    m_xlsOutputFile = value;
}

void RStatsModuleSessionDataImpl::setTextOutputFile(const std::string & value)
{
    m_textOutputFile=value;
}

void RStatsModuleSessionDataImpl::setAuditName(const std::string & value)
{
    m_auditName=value;
}

const cbtek::common::utility::DateEntity &RStatsModuleSessionDataImpl::getCreationDate() const
{
    return m_creationDate;
}

const cbtek::common::utility::TimeEntity &RStatsModuleSessionDataImpl::getCreationTime() const
{
    return m_creationTime;
}

const std::string &RStatsModuleSessionDataImpl::getCSVOutputFile() const
{
    return m_csvOutputFile;
}

const std::string &RStatsModuleSessionDataImpl::getXLSOutputFile() const
{
    return m_xlsOutputFile;
}

const std::string &RStatsModuleSessionDataImpl::getTextOutputFile() const
{
    return m_textOutputFile;
}

const std::string &RStatsModuleSessionDataImpl::getAuditName() const
{
    return m_auditName;
}

void RStatsModuleSessionDataImpl::setViewInBrowserFlag(bool flag)
{
    m_viewInBrowser = flag;
}

bool RStatsModuleSessionDataImpl::isViewableInBrowser() const
{
    return m_viewInBrowser;
}

void RStatsModuleSessionDataImpl::createSessionId()
{
    m_sessionId = StringUtils::createUUID();
}
}}}//end namespace


