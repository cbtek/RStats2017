/*
    RStatsSettingsManager.cpp
    

*/
//----------------------------------------
//RStatsSettingsManager.cpp generated by CBTek Solutions on 01-27-2017 at 06:27:33 PM
//----------------------------------------

#include "RStatsSettingsManager.h"

#include "utility/inc/SystemUtils.hpp"
#include "utility/inc/XMLStreamWriter.h"
#include "utility/inc/XMLReader.h"
#include "utility/inc/Exception.hpp"

using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace utils {

CREATE_EXCEPTION_NO_MSG(InvalidSettingIdException)

RStatsSettingsManager RStatsSettingsManager::m_instance = RStatsSettingsManager();


RStatsSettingsManager & RStatsSettingsManager::inst()
{
    return m_instance;
}

const std::vector<SettingPtr> &RStatsSettingsManager::getSettings() const
{
    return m_settings;
}

void RStatsSettingsManager::setSettings(const std::vector<SettingPtr> &settings)
{
    m_settings = settings;
}

void RStatsSettingsManager::readSettings()
{
    XMLReader reader;
    reader.load(m_settingsFilePath);
    XMLDataElement * parent = reader.getElement("settings");
    for (size_t a1 = 0; a1 < parent->getNumChildren();++a1)
    {
        XMLDataElement * child = parent->getChildAt(a1);
        std::string type = StringUtils::toUpper(child->getAttributeValue("type"));
        if (type == "NUMERIC")
        {
            NumericSetting setting;
            setting.type = type;
            setting.description=child->getAttributeValue("description");
            setting.id=child->getAttributeValue("id");
            setting.min=child->getAttributeValueAsType<int>("min");
            setting.max=child->getAttributeValueAsType<int>("max");
            setting.value=child->getAttributeValueAsType<int>("value");
            setting.label = child->getAttributeValue("label");
            m_settings.push_back(std::make_shared<NumericSetting>(setting));
        }
        else if (type == "PATH_BROWSER")
        {
            PathBrowserSetting setting;
            setting.label = child->getAttributeValue("label");
            setting.type = type;
            setting.description=child->getAttributeValue("description");
            setting.id=child->getAttributeValue("id");
            setting.value=child->getAttributeValue("value");
            m_settings.push_back(std::make_shared<PathBrowserSetting>(setting));
        }
    }
}

void RStatsSettingsManager::writeSettings()
{
    std::ofstream out((m_settingsFilePath).c_str());
    XMLStreamWriter xml(out);
    xml.writeStartDocument();
    xml.writeStartElementNoAttributes("settings");
    for(SettingPtr settingPtr : m_settings)
    {
        xml.writeStartElement("setting");
        xml.writeAttribute("id",settingPtr->id);
        xml.writeAttribute("label",settingPtr->label);
        xml.writeAttribute("type",settingPtr->type);
        if (StringUtils::toUpper(settingPtr->type) == "NUMERIC")
        {
            NumericSetting * setting = dynamic_cast<NumericSetting*>(settingPtr.get());
            if (setting)
            {
                xml.writeAttribute("min",std::to_string(setting->min));
                xml.writeAttribute("max",std::to_string(setting->max));
                xml.writeAttribute("value",std::to_string(setting->value));
            }
        }
        else if (StringUtils::toUpper(settingPtr->type) == "PATH_BROWSER")
        {
            PathBrowserSetting * setting = dynamic_cast<PathBrowserSetting*>(settingPtr.get());
            if (setting)
            {
                xml.writeAttribute("value",setting->value);
            }
        }
        xml.writeAttribute("description",settingPtr->type);
        xml.writeEndElement();
    }
    xml.writeEndElement("settings");
    out.close();
}

SettingPtr RStatsSettingsManager::getSettingById(const std::string &id) const
{
    for(const SettingPtr& settingPtr:m_settings)
    {
        if (StringUtils::toUpperTrimmed(settingPtr->id) == StringUtils::toUpperTrimmed(id))
        {
            return settingPtr;
        }
    }
    throw InvalidSettingIdException(EXCEPTION_TAG_LINE+"The setting with id=\""+id+"\" was not found!\nPlease ensure this setting is stored in the \"config_settings.xml\" file and that its id is spelled correctly.");
}

RStatsSettingsManager::RStatsSettingsManager()
{
   m_settingsFilePath = FileUtils::buildFilePath(SystemUtils::getCurrentExecutableDirectory(),"config/config_settings.xml");
   if (FileUtils::fileExists(m_settingsFilePath))
   {
       readSettings();
   }
}

RStatsSettingsManager::~RStatsSettingsManager()
{

}


}}}//end namespace

