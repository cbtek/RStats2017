/*
    RStatsModuleProperties.cpp
    

*/
//----------------------------------------
//RStatsModuleProperties.cpp generated by sunefusion on 02-28-2017 at 09:39:48 PM
//----------------------------------------
#include "RStatsModuleProperties.h"

#include <sstream>

namespace oig {
namespace ratstats {
namespace utils {


RStatsModuleProperties::RStatsModuleProperties()
{

}

RStatsModuleProperties::~RStatsModuleProperties()
{

}

void RStatsModuleProperties::setType(const std::string &value)
{
    m_type=value;
}

void RStatsModuleProperties::setName(const std::string & value)
{
    m_name=value;
}

void RStatsModuleProperties::setWorkingDir(const std::string & value)
{
    m_workingDir=value;
}

void RStatsModuleProperties::setLocation(const std::string & value)
{
    m_location=value;
}

void RStatsModuleProperties::setGroup(const std::string & value)
{
    m_group=value;
}

void RStatsModuleProperties::setArgs(const std::vector<std::pair<std::string,std::string> > & value)
{
    m_args=value;
}

void RStatsModuleProperties::buildCommand(std::string& commandOut)
{
    std::ostringstream command;
    command << m_scriptPathMap[m_type]<<" "<<m_location<<" ";
    for (const auto& it : m_args)
    {
        if (it.first.size())
        {
            command << it.first<<" ";
        }
        if (it.second.size())
        {
            command <<"\""<<it.second<<"\" ";
        }
    }
    commandOut = command.str();
}

const std::string &RStatsModuleProperties::getType() const
{
    return m_type;
}

const std::string &RStatsModuleProperties::getName() const
{
    return m_name;
}

const std::string &RStatsModuleProperties::getWorkingDir() const
{
    return m_workingDir;
}

const std::string &RStatsModuleProperties::getLocation() const
{
    return m_location;
}

const std::string &RStatsModuleProperties::getGroup() const
{
    return m_group;
}

const std::vector<std::pair<std::string,std::string> > &RStatsModuleProperties::getArgs() const
{
    return m_args;
}

void RStatsModuleProperties::addArg(const std::string &flag, const std::string &argument)
{
    m_args.push_back(std::make_pair(flag,argument));
}

void RStatsModuleProperties::clearArgs()
{
    m_args.clear();
}

void oig::ratstats::utils::RStatsModuleProperties::setScriptPath(const std::string &type, const std::string &scriptFilePath)
{
    m_scriptPathMap[type] = scriptFilePath;
}


}}}//end namespace


