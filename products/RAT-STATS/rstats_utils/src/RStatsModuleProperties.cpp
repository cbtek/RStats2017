/*
    RStatsModuleProperties.cpp
    

*/
//----------------------------------------
//RStatsModuleProperties.cpp generated by sunefusion on 02-28-2017 at 09:39:48 PM
//----------------------------------------
#include "RStatsModuleProperties.h"

#include <sstream>

#include "utility/inc/XMLUtils.h"
#include "utility/inc/FileUtils.hpp"

using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace utils {


RStatsModuleProperties::RStatsModuleProperties()
{
    m_showAppConsole = false;
    m_appIcon = "img_module.png";
}

RStatsModuleProperties::~RStatsModuleProperties()
{

}

void RStatsModuleProperties::saveConfig(const std::string &filePath)
{
    std::ofstream out(filePath.c_str());
    if (out.is_open())
    {
        XMLStreamWriter xml(out);
        xml.writeStartDocument();
        xml.writeStartElementNoAttributes("module");
        xml.writeTextElement("name",m_appName);
        xml.writeTextElement("category",m_appCategory);
        xml.writeTextElement("path",m_appPath);
        xml.writeTextElement("script_path",m_appScriptPath);
        xml.writeTextElement("script_path_args",m_appScriptPathArgs);
        xml.writeTextElement("type",m_appType);
        xml.writeTextElement("working_dir",m_appType);
        xml.writeTextElement("icon",m_appIcon);
        xml.writeTextElement("show_console", (m_showAppConsole ? "TRUE" : "FALSE"));
        xml.writeTextElement("args",XMLUtils::getEncodedString(m_appArgs));
        xml.writeEndElement("module");
        m_configPath = filePath;
    }
}

void RStatsModuleProperties::loadConfig(const std::string &filePath)
{
    XMLReader reader;
    reader.load(filePath);
    XMLDataElement * module = reader.getElement("module");
    if (module)
    {
        XMLDataElement * nameModule = module->getChild("name");
        XMLDataElement * pathModule = module->getChild("path");
        XMLDataElement * typeModule = module->getChild("type");
        XMLDataElement * workingDirModule = module->getChild("working_dir");
        XMLDataElement * categoryModule = module->getChild("category");
        XMLDataElement * iconModule = module->getChild("icon");
        XMLDataElement * showConsoleModule = module->getChild("show_console");
        XMLDataElement * scriptPathModule = module->getChild("script_path");
        XMLDataElement * scriptPathArgsModule = module->getChild("script_path_args");
        XMLDataElement * argsModule = module->getChild("args");

        m_appName = nameModule?nameModule->getElementData():"";
        m_appPath = pathModule?pathModule->getElementData():"";
        m_appType = typeModule?typeModule->getElementData():"";
        m_appWorkingDir = workingDirModule?workingDirModule->getElementData():"";
        m_appCategory = categoryModule?categoryModule->getElementData():"";
        m_appIcon = iconModule?iconModule->getElementData():"";
        m_showAppConsole = showConsoleModule && StringUtils::toUpperTrimmed(showConsoleModule->getElementData()) == "TRUE"?true:false;
        m_appArgs = argsModule?XMLUtils::getDecodedString(argsModule->getElementData()):"";
        m_configPath = filePath;
        m_appScriptPath = scriptPathModule ? scriptPathModule->getElementData():"";
        m_appScriptPathArgs = scriptPathArgsModule ? scriptPathArgsModule->getElementData():"";
    }
    else
    {
        throw FileNotFoundException(EXCEPTION_TAG_LINE+"Could not parse file at \""+filePath+"\"");
    }
}

void RStatsModuleProperties::saveConfig()
{
    saveConfig(m_configPath);
}

void RStatsModuleProperties::setType(const std::string &value)
{
    m_appType=value;
}

void RStatsModuleProperties::setName(const std::string & value)
{
    m_appName=value;
}

void RStatsModuleProperties::setWorkingDir(const std::string & value)
{
    m_appWorkingDir=value;
}

void RStatsModuleProperties::setPath(const std::string & value)
{
    m_appPath=value;
}

void RStatsModuleProperties::setCategory(const std::string & value)
{
    m_appCategory=value;
}

void RStatsModuleProperties::generateApplicationCommand(std::string& commandOut, std::string& argsOut)
{    
    if (m_appScriptPath.size() > 0)
    {
        commandOut = "\""+m_appScriptPath +"\" \""+m_appPath+"\"";
        argsOut = m_appArgs;
    }
    else
    {
        commandOut = "\""+m_appPath+"\"";
        argsOut = m_appArgs;
    }
}

std::string RStatsModuleProperties::getGeneratedApplicationCommand() const
{
    std::ostringstream command;   
    if (m_appScriptPath.size() > 0)
    {
        command << "\""<<m_appScriptPath<<"\" \""<<m_appPath<<" "<<m_appArgs<<"\"";
    }
    else
    {
        command << "\""+m_appPath+"\"";
        if (m_appArgs.size() > 0)
        {
            command << " \""<<m_appArgs<<"\"";
        }
    }
    return command.str();
}

const std::string &RStatsModuleProperties::getType() const
{
    return m_appType;
}

const std::string &RStatsModuleProperties::getName() const
{
    return m_appName;
}

const std::string &RStatsModuleProperties::getWorkingDir() const
{
    return m_appWorkingDir;
}

const std::string &RStatsModuleProperties::getPath() const
{
    return m_appPath;
}

const std::string &RStatsModuleProperties::getCategory() const
{
    return m_appCategory;
}

const std::string &RStatsModuleProperties::getDefinitionPath() const
{
    return m_configPath;
}

const std::string &RStatsModuleProperties::getScriptPathArgs() const
{
    return m_appScriptPathArgs;
}

void RStatsModuleProperties::setScriptPathArgs(const std::string &value)
{
    m_appScriptPathArgs = value;
}

const std::string &RStatsModuleProperties::getArgs() const
{
    return m_appArgs;
}

void RStatsModuleProperties::setArgs(const std::string &value)
{
    m_appArgs = value;
}

void RStatsModuleProperties::setDefinitionPath(const std::string &path)
{
    m_configPath = path;
}

void RStatsModuleProperties::removeConfig()
{
    FileUtils::deleteFile(m_configPath);
}

void RStatsModuleProperties::setScriptPath(const std::string &scriptFilePath)
{
    m_appScriptPath = scriptFilePath;
}

const std::string &RStatsModuleProperties::getScriptPath() const
{
    return m_appScriptPath;
}

void RStatsModuleProperties::setIcon(const std::string &appIcon)
{
    m_appIcon = appIcon;
}

std::string RStatsModuleProperties::getIcon() const
{
    return m_appIcon;
}

void RStatsModuleProperties::setConsoleShown(bool flag)
{
    m_showAppConsole = flag;
}

bool RStatsModuleProperties::isConsoleShown() const
{
    return m_showAppConsole;
}
}}}//end namespace


