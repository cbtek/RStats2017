/*
    RStatsDataFileParser.cpp
    

*/
//----------------------------------------
//RStatsDataFileParser.cpp generated by cbtek on 03-11-2017 at 11:47:23 AM
//----------------------------------------
#include "RStatsDataFileParser.h"

#include "utility/inc/FileUtils.hpp"

using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace utils {


RStatsDataFileParser::RStatsDataFileParser(const std::string &filePath)
{
    m_filePath = filePath;
}

void RStatsDataFileParser::load()
{
    std::vector<std::string> lines = FileUtils::getFileLines(m_filePath);
    StringUtils::clean(lines);
    if (lines.empty())
    {
        //Throw exception
        return;
    }

    std::vector<std::string> firstLineItems = splitLine(lines.front());
    size_t columns = firstLineItems.size();
    StringUtils::clean(firstLineItems);
    size_t startRow = 0;
    bool hasHeader = false;

    if (firstLineItems.size() > 0)
    {
        if (!StringUtils::isNumeric(firstLineItems[0]))
        {
            startRow = 1;
            hasHeader = true;
        }
    }

    for (size_t a1 = startRow; a1 < lines.size();++a1)
    {
        std::string line = lines[a1];
        std::vector<std::string> items = splitLine(line);
        for (size_t a2 = 0; a2 < items.size();++a2)
        {
            if (hasHeader && a2 < firstLineItems.size())
            {
                std::cerr << firstLineItems[a2]<<":";
            }
            items[a2] = StringUtils::remove(items[a2],",");
            std::cerr << items[a2]<<std::endl;
        }
    }
}

void RStatsDataFileParser::write(const RStatsWorksheet &sheet)
{

}

RStatsDataFileParser::~RStatsDataFileParser()
{

}

std::vector<std::string> RStatsDataFileParser::splitLine(const std::string &line)
{
    std::vector<std::string>delimiters{"\t"," ",","};
    for (size_t a1 = 0; a1 < delimiters.size(); ++a1)
    {
        std::string delimiter = delimiters[a1];
        std::vector<std::string> items = StringUtils::split(line,delimiter);
        StringUtils::clean(items);
        if (items.size() > 1)
        {
            return items;
        }
    }
    //throw exception
}




}}}//end namespace


