/*
    RStatsWorksheet.cpp
    

*/
//----------------------------------------
//RStatsWorksheet.cpp generated by CBTek Solutions on 02-01-2017 at 06:31:40 PM
//----------------------------------------
#include "RStatsWorksheet.h"

#include "utility/inc/StringUtils.hpp"

using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace utils {

RStatsTextAlignment RStatsCell::ms_DefaultAlignment = RStatsTextAlignment::AlignLeft;
Color RStatsCell::ms_DefaultBGColor = Color(255,255,255);
Color RStatsCell::ms_DefaultFGColor = Color(0,0,0);
Font RStatsCell::ms_DefaultFont = cbtek::common::utility::Font("arial");
size_t RStatsCell::ms_DefaultFloatingPointDecimals = 6;

RStatsWorksheet::RStatsWorksheet(const std::string &name)
{
    m_numColumns = 0;
    m_numRows = 0;
    m_worksheetTitle = name;
}

RStatsCell& RStatsWorksheet::operator()(const std::string &address)
{
    size_t r,c;
    parseCellAddress(address,r,c);
    return this->operator ()(r,c);
}

size_t RStatsWorksheet::getNumRows() const
{
    return m_numRows;
}

size_t RStatsWorksheet::getNumColumns() const
{
    return m_numColumns;
}

const std::map<std::pair<size_t, size_t>, RStatsCell>& RStatsWorksheet::getCells() const
{
    return m_dataTable;
}

void RStatsWorksheet::setDefaultTextAlignment(RStatsTextAlignment alignment)
{
    RStatsCell::ms_DefaultAlignment = alignment;
}

void RStatsWorksheet::setDefaultBGColor(const Color &bgColor)
{
    RStatsCell::ms_DefaultBGColor = bgColor;
}

void RStatsWorksheet::setDefaultFGColor(const Color &fgColor)
{
    RStatsCell::ms_DefaultFGColor = fgColor;
}

void RStatsWorksheet::setDefaultFont(const Font &font)
{
    RStatsCell::ms_DefaultFont = font;
}

void RStatsWorksheet::setDefaultFloatingPointDecimals(size_t count)
{
    RStatsCell::ms_DefaultFloatingPointDecimals = count;
}

void RStatsWorksheet::resetDefaults()
{
    RStatsCell::ms_DefaultAlignment = RStatsTextAlignment::AlignLeft;
    RStatsCell::ms_DefaultBGColor = Color(255,255,255);
    RStatsCell::ms_DefaultFGColor = Color(0,0,0);
    RStatsCell::ms_DefaultFont = cbtek::common::utility::Font("arial");
    RStatsCell::ms_DefaultFloatingPointDecimals = 6;
}

RStatsCell& RStatsWorksheet::operator()(size_t row, size_t column)
{
    if (row >= m_numRows)
    {
        m_numRows = row + 1;
    }
    if (column >= m_numColumns)
    {
        m_numColumns = column + 1;
    }
    return m_dataTable[std::make_pair(row,column)];
}

RStatsWorksheet::~RStatsWorksheet()
{

}


void RStatsWorksheet::parseCellAddress(const std::string &address, size_t &r, size_t &c)
{
    std::string colLabel;
    std::string rowLabel;
    for (char i : address)
    {
        if (std::isalpha(i))
        {
            colLabel.push_back(i);
        }
        else if (std::isdigit(i))
        {
            rowLabel.push_back(i);
        }
    }
    r = StringUtils::toInt(rowLabel) - 1;
    c = RStatsUtils::getColumnIndexFromLabel(colLabel);
}

void RStatsWorksheet::setWorksheetTitle(const std::string & value)
{
    m_worksheetTitle=value;
}

const std::string &RStatsWorksheet::getWorksheetTitle() const
{
    return m_worksheetTitle;
}

}}}//end namespace


