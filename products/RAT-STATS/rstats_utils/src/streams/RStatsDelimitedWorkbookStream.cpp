/*
    RStatsDelimitedWorkbookStream.cpp
*/
//----------------------------------------
//RStatsDelimitedWorkbookStream.cpp generated by CBTek Solutions on 02-01-2017 at 11:54:13 PM
//----------------------------------------

#include "RStatsDelimitedWorkbookStream.h"

#include "utility/inc/FileUtils.hpp"

using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace utils {
namespace streams {

RStatsDelimitedWorkbookStream::RStatsDelimitedWorkbookStream(const std::string &filePath, bool readHeader)
{
    m_filePath = filePath;
    m_readHeader = readHeader;
}

RStatsWorkbook RStatsDelimitedWorkbookStream::read()
{
    RStatsWorksheet sheet;
    RStatsWorkbook workbook;
    std::vector<std::string> lines = FileUtils::getFileLines(m_filePath);
    StringUtils::clean(lines);
    if (lines.empty())
    {
        //Throw exception
        return workbook;
    }

    std::vector<std::string> firstLineItems = splitLine(lines.front());    
    StringUtils::clean(firstLineItems);
    bool hasHeader = false;
    if (firstLineItems.size() > 0)
    {
        if (!StringUtils::isNumeric(firstLineItems[0]))
        {
            hasHeader = true;
            m_header = firstLineItems;
            lines.erase(lines.begin());
        }
    }
    else if(lines.size() > 0)
    {
        lines.erase(lines.begin());
    }

    for (size_t a1 = 0;a1 < m_header.size();++a1)
    {
        sheet(0,a1) = m_header[a1];
    }

    for (size_t a1 = 0; a1 < lines.size();++a1)
    {
        std::string line = lines[a1];
        std::vector<std::string> items = splitLine(line);
        for (size_t a2 = 0; a2 < items.size();++a2)
        {
            sheet(a1,a2) = StringUtils::remove(items[a2],",");
        }
    }

    sheet.setWorksheetTitle(FileUtils::getFileName(m_filePath));
    workbook.addWorksheet(sheet);
    return workbook;
}

void RStatsDelimitedWorkbookStream::write(const RStatsWorkbook &workbook)
{
    std::string extension = FileUtils::getFileExtension(m_filePath);
    for (size_t a1 = 0; a1 < workbook.getNumWorksheets(); ++ a1)
    {
        FileUtils::writeFileContents(m_filePath+"_"+std::to_string(a1)+"_"+extension,
                                     workbook(a1).toCommaDelimitedString());
    }
}

std::vector<std::string> RStatsDelimitedWorkbookStream::splitLine(const std::string &line) const
{
    if (StringUtils::trimmed(line).empty())
    {
        return std::vector<std::string>();
    }
    std::vector<std::string>delimiters{"\t"," ",","};
    for (size_t a1 = 0; a1 < delimiters.size(); ++a1)
    {
        std::string delimiter = delimiters[a1];
        std::vector<std::string> items = StringUtils::split(line,delimiter);
        StringUtils::clean(items);

        //Check and see if CSV has quotes around each item and remove if true
        if (items.size() && delimiter == "," &&
            StringUtils::startsWith(items[0],"\"") &&
            StringUtils::endsWith(items[0],"\""))
        {
            for (std::string& item : items)
            {
                item.pop_back();
                item.erase(item.begin()+0);
            }
        }

        if (items.size() > 1)
        {
            return items;
        }
    }
    return std::vector<std::string>();
    //throw exception
}

RStatsDelimitedWorkbookStream::~RStatsDelimitedWorkbookStream()
{

}
}}}}//end namespace


