/*
    RStatsDIFWorkbookStream.cpp
    

*/
//----------------------------------------
//RStatsDIFWorkbookStream.cpp generated by cbtek on 03-31-2017 at 04:31:46 PM
//----------------------------------------
#include "RStatsDIFWorkbookStream.h"

#include "utility/inc/StringUtils.hpp"
#include "utility/inc/FileUtils.hpp"

using namespace oig::ratstats::utils;
using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace utils {
namespace streams {

RStatsDIFWorkbookStream::RStatsDIFWorkbookStream(const std::string &filePath)
{
    m_filePath = filePath;
}

void RStatsDIFWorkbookStream::write(const RStatsWorkbook &workbook)
{    
    if (workbook.getNumWorksheets() > 0)
    {
        RStatsWorksheet sheet = workbook(0);
        sheet.setThousandsSeperatorEnabled(false);
        std::ofstream out(m_filePath.c_str(),std::ios::out);
        if (!out)
        {
            THROW_GENERIC_EXCEPTION("Could not open file for writing: "+m_filePath)
        }
        size_t rowCount = sheet.getNumRows();
        size_t columnCount = sheet.getNumColumns();
        writeHeader(sheet,out);
        for (size_t r = 0; r < rowCount; ++r)
        {
            out << "-1,0" << std::endl;
            out << "BOT" << std::endl;
            for (size_t c = 0; c < columnCount; ++c)
            {
                writeCell(sheet(r,c),out);
            }
        }
        out << "-1,0" << std::endl;
        out <<"EOD" << std::endl;
        out.close();
    }
}

RStatsWorkbook RStatsDIFWorkbookStream::read()
{
    RStatsWorkbook workbook;
    RStatsDIFParseStates currentState = RStatsDIFParseStates::Start;    
    RStatsWorksheet sheet;
    size_t row = 0;
    size_t column = 0;
    std::ifstream in(m_filePath.c_str(), std::ios::in);
    if (!in)
    {
        THROW_GENERIC_EXCEPTION("Could not open file for reading: "+m_filePath)
    }

    while(in)
    {
        std::string line;
        std::getline(in,line);
        if (!in)
        {
            break;
        }

        if (StringUtils::startsWith(line,"BOT"))
        {
            currentState = RStatsDIFParseStates::ReadRowData;
            ++row;
            column = 0;
        }
        else if (StringUtils::startsWith(line,"EOD"))
        {
            currentState = RStatsDIFParseStates::End;
            in.close();
        }
        else
        {
            if(currentState == RStatsDIFParseStates::ReadRowData)
            {
                std::vector<std::string> items;
                std::string dataLine = StringUtils::trimmed(line);
                if (dataLine.size() > 2)
                {
                    //Grab type from line beginning
                    std::string type;
                    type.push_back(dataLine[0]);
                    if(dataLine[0] == '-' && dataLine.size() > 3)
                    {
                        type.push_back(dataLine[1]);
                        dataLine.erase(dataLine.begin());
                    }

                    //Remove type
                    dataLine.erase(dataLine.begin());

                    //Remove comma
                    dataLine = StringUtils::trimmed(dataLine);
                    dataLine.erase(dataLine.begin());
                    dataLine = StringUtils::trimmed(dataLine);
                    items.push_back(type);
                    items.push_back(dataLine);
                }

                if (items.size() > 1)
                {

                    std::int64_t type = StringUtils::toInt(items[0]);
                    if (type == 0)
                    {
                        ++column;
                        std::string value = StringUtils::trimmed(StringUtils::remove(items[1],"$"));
                        value = StringUtils::remove(value,"%");
                        value = StringUtils::remove(value,",");
                        if (value.size() == 1 && !StringUtils::isNumeric(value))
                        {
                            value = "0";
                        }
                        sheet(row - 1,column - 1) = value;

                    }
                    else if (type == 1)
                    {
                        ++column;
                        std::string nextLine;
                        std::getline(in,nextLine);
                        nextLine = StringUtils::trimmed(nextLine);
                        nextLine = StringUtils::trimmed(nextLine, '"',false);
                        nextLine = StringUtils::replace(nextLine,"\"\"","\"");
                        sheet(row - 1,column - 1) = nextLine;
                    }
                }
            }
        }
    }
    workbook.addWorksheet(sheet);
    return workbook;
}

RStatsDIFWorkbookStream::~RStatsDIFWorkbookStream()
{

}

void RStatsDIFWorkbookStream::writeHeader(const RStatsWorksheet &sheet,
                                    std::ostream &out)
{
    std::string sheetName = sheet.getWorksheetTitle();
    if (StringUtils::isEmpty(sheetName))
    {
        sheetName = "EXCEL";
    }
    sheetName = StringUtils::replace(sheetName,"\"","\"\"");
    out << "TABLE" << std::endl;
    out << "0,1" << std::endl;
    out << "\"" << sheetName << "\"" << std::endl;
    out << "VECTORS" << std::endl;
    out << "0," << sheet.getNumRows() << std::endl;
    out << "\"\"" << std::endl;
    out << "TUPLES" << std::endl;
    out << "0," << sheet.getNumColumns() << std::endl;
    out << "\"\"" << std::endl;
    out << "DATA" << std::endl;
    out << "0,0" << std::endl;
    out << "\"\"" << std::endl;
}

void RStatsDIFWorkbookStream::writeCell(const RStatsCell &cell,
                                  std::ostream &out)
{
    bool isNumber = StringUtils::isNumeric(cell.text);
    if (isNumber)
    {
        out << "0," << cell.text << std::endl;
        out << "V" << std::endl;
    }
    else
    {
        std::string text = StringUtils::replace(cell.text,"\"","\"\"");
        out << "1,0" << std::endl;
        out << "\"" << text << "\"" << std::endl;
    }

}
}}}}//end namespace


