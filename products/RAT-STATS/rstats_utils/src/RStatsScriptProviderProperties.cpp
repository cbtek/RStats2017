/*
    RStatsScriptProviderProperties.cpp
    

*/
//----------------------------------------
//RStatsScriptProviderProperties.cpp generated by sunefusion on 03-04-2017 at 09:01:54 AM
//----------------------------------------
#include "RStatsScriptProviderProperties.h"

#include <sstream>

#include "utility/inc/XMLReader.h"
#include "utility/inc/XMLStreamWriter.h"
#include "utility/inc/XMLUtils.h"
#include "utility/inc/DateTimeUtils.hpp"
#include "utility/inc/FileUtils.hpp"

using namespace cbtek::common::utility;

namespace oig {
namespace ratstats {
namespace utils {


RStatsScriptProviderProperties::RStatsScriptProviderProperties()
{
    m_icon = "img_terminal.png";
}

RStatsScriptProviderProperties::~RStatsScriptProviderProperties()
{

}

void RStatsScriptProviderProperties::setPath(const std::string & value)
{
    m_path=value;
}

void RStatsScriptProviderProperties::setIcon(const std::string & value)
{
    m_icon=value;
}

void RStatsScriptProviderProperties::setArgs(const std::string & value)
{
    m_args=value;
}

void RStatsScriptProviderProperties::setName(const std::string & value)
{
    m_name=value;
}

const std::string &RStatsScriptProviderProperties::getPath() const
{
    return m_path;
}

const std::string &RStatsScriptProviderProperties::getIcon() const
{
    return m_icon;
}

const std::string &RStatsScriptProviderProperties::getArgs() const
{
    return m_args;
}

const std::string &RStatsScriptProviderProperties::getName() const
{
    return m_name;
}


void RStatsScriptProviderProperties::loadConfig(const std::string &filePath)
{
    m_configPath = filePath;
    XMLReader reader;
    reader.load(filePath);
    XMLDataElement * provider = reader.getElement("provider");
    if (provider)
    {
        XMLDataElement * xmlName = provider->getChild("name");
        XMLDataElement * xmlPath = provider->getChild("path");
        XMLDataElement * xmlIcon = provider->getChild("icon");
        XMLDataElement * xmlArgs = provider->getChild("args");
        m_name = xmlName?StringUtils::trimmed(xmlName->getElementData()):"Unnamed_"+DateTimeUtils::getTimeStamp();
        m_path = xmlPath?StringUtils::trimmed(xmlPath->getElementData()):"";
        m_icon = xmlIcon?StringUtils::trimmed(xmlIcon->getElementData()):"img_provider.png";
        m_args = xmlArgs?StringUtils::trimmed(xmlArgs->getElementData()):"";
    }
    else
    {
        throw FileNotFoundException(EXCEPTION_TAG_LINE+"Could not parse file at \""+filePath+"\"");
    }
}

void RStatsScriptProviderProperties::removeConfig()
{
    FileUtils::deleteFile(m_configPath);
}

const std::string &RStatsScriptProviderProperties::getConfigPath() const
{
    return m_configPath;
}

void RStatsScriptProviderProperties::saveConfig()
{
    saveConfig(m_configPath);
}

void RStatsScriptProviderProperties::saveConfig(const std::string &filePath)
{
    std::ofstream out(filePath.c_str());
    if (out.is_open())
    {
        XMLStreamWriter xml(out);
        xml.writeStartDocument();
        xml.writeStartElementNoAttributes("provider");
        xml.writeTextElement("name",m_name);
        xml.writeTextElement("path",m_path);
        xml.writeTextElement("icon",m_icon);
        xml.writeTextElement("args",m_args);
        xml.writeEndElement("provider");
        m_configPath = filePath;
    }
}

}}}//end namespace


