/*
UIGooeyFiAppImgui.cpp
    
MIT License

Copyright (c) 2016 cbtek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//----------------------------------------
//UIGooeyFiAppImgui.cpp generated by CBTek Solutions on 02-19-2017 at 02:22:34 PM
//----------------------------------------
#include "UIGooeyFiAppImgui.h"
#include "contrib/imgui/inc/imgui.h"

#include "gooeyfi_launcher/inc/platform/imgui/imgui_impl_glfw.h"

#include "gooeyfi_core/inc/GooeyFiWidget.hpp"
#include "gooeyfi_core/inc/GooeyFiNumeric.h"
#include "gooeyfi_core/inc/GooeyFiButton.h"
#include "gooeyfi_core/inc/GooeyFiTextInput.h"
#include "gooeyfi_core/inc/GooeyFiPathBrowser.h"

#include "utility/inc/FileUtils.hpp"

#include <stdio.h>

using namespace cbtek::common::utility;

namespace cbtek {
namespace products {
namespace gooeyfi {
namespace launcher {
namespace platform {
namespace imgui {

UIGooeyFiAppImgui::UIGooeyFiAppImgui(const core::GooeyFiApp &appPayload) : m_app(appPayload)
{       
    // Setup window
    if (!glfwInit())
    {
        exit(1);
    }
    m_window = glfwCreateWindow(640, 480, appPayload.getTitle().c_str(), NULL, NULL);
    glfwMakeContextCurrent(m_window);
}

void UIGooeyFiAppImgui::start()
{
    // Setup ImGui binding
    ImGui_ImplGlfw_Init(m_window, true);

    // Load Fonts
    // (there is a default font, this is only if you want to change it. see extra_fonts/README.txt for more details)
    //ImGuiIO& io = ImGui::GetIO();
    //io.Fonts->AddFontDefault();
    //io.Fonts->AddFontFromFileTTF("../../extra_fonts/Cousine-Regular.ttf", 15.0f);
    //io.Fonts->AddFontFromFileTTF("../../extra_fonts/DroidSans.ttf", 16.0f);
    //io.Fonts->AddFontFromFileTTF("../../extra_fonts/ProggyClean.ttf", 13.0f);
    //io.Fonts->AddFontFromFileTTF("../../extra_fonts/ProggyTiny.ttf", 10.0f);
    //io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());

    bool show_test_window = true;
    bool show_another_window = false;    
    std::map<const core::GooeyFiWidget*, char *> charArrayInputMap;
    std::map<const core::GooeyFiWidget*, std::string> stringInputMap;
    std::map<const core::GooeyFiWidget*, double> floatInputMap;


    ImVec4 clear_color = ImColor(27, 117, 187);
    // Main loop
    while (!glfwWindowShouldClose(m_window))
    {
        static bool bWindowSizeInit = false;
        int display_w = 0 , display_h = 0;
        float f;
        glfwPollEvents();

        glfwGetFramebufferSize( m_window , &display_w , &display_h );

        ImGui_ImplGlfw_NewFrame();

        ImGui::Begin("MainWindow",
                    0 ,
                    ImGuiWindowFlags_NoResize |
                    ImGuiWindowFlags_NoMove |
                    ImGuiWindowFlags_NoCollapse |
                    ImGuiWindowFlags_ShowBorders |
                    ImGuiWindowFlags_NoSavedSettings |
                    ImGuiWindowFlags_NoTitleBar );

        ImGuiStyle& style = ImGui::GetStyle();
        style.Colors[ImGuiCol_WindowBg] = ImColor(27, 117, 187);
        style.Colors[ImGuiCol_Border] = ImColor(27, 117, 187);
        style.Colors[ImGuiCol_FrameBg] = ImColor(60,60,60);

//        ImGuiCol_FrameBg,               // Background of checkbox, radio button, plot, slider, text input
//        ImGuiCol_FrameBgHovered,
//        ImGuiCol_FrameBgActive,

        //ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);

        for(const core::GooeyFiWidgetPage& page : m_app.getPages())
        {
            if (ImGui::CollapsingHeader(page.getTitle().c_str(),NULL,true,true))
            {

                for (const gooeyfi::core::GooeyFiWidgetPtr& widget : page.getWidgets())
                {
                    switch(widget->getId())
                    {
                        case gooeyfi::core::GooeyFiWidgetIdType::Button:
                        {
                            const gooeyfi::core::GooeyFiButton* button = dynamic_cast<const gooeyfi::core::GooeyFiButton*>(widget.get());
                            ImGui::Button(button->getLabel().c_str());
                        }
                        break;
                        case gooeyfi::core::GooeyFiWidgetIdType::TextInput:
                        {
                            const gooeyfi::core::GooeyFiTextInput* text = dynamic_cast<const gooeyfi::core::GooeyFiTextInput*>(widget.get());
                            if (!charArrayInputMap.count(text))
                            {
                                size_t count = text->getText().size()+1;
                                char * charBuffer = new char[count];
                                for (size_t a1 = 0; a1 < text->getText().size(); ++a1)
                                {
                                    charBuffer[a1] = text->getText()[a1];
                                }
                                charBuffer[text->getText().size()] = '\0';
                                charArrayInputMap[text] = charBuffer;
                            }

                            ImGui::InputText(text->getLabel().c_str(),
                                             charArrayInputMap[text],
                                             text->getText().size());
                        }
                        break;
                        case gooeyfi::core::GooeyFiWidgetIdType::Numeric:
                        {

                            const gooeyfi::core::GooeyFiNumeric* numeric = dynamic_cast<const gooeyfi::core::GooeyFiNumeric*>(widget.get());
                            if (!floatInputMap.count(numeric))
                            {
                                floatInputMap[numeric] = numeric->getValue();
                            }
                            float value = floatInputMap[numeric];
                            ImGui::SliderFloat(numeric->getLabel().c_str(),
                                               &value,
                                               numeric->getMin(),numeric->getMax());
                            floatInputMap[numeric] = value;
                        }
                        break;
                        case gooeyfi::core::GooeyFiWidgetIdType::PathBrowser:
                        {
                            const gooeyfi::core::GooeyFiPathBrowser* path = dynamic_cast<const gooeyfi::core::GooeyFiPathBrowser*>(widget.get());
                            std::string file = "<no path selected>";
                            if (stringInputMap.count(path))
                            {
                                file = stringInputMap[path];
                            }

                            ImGui::Text(file.c_str());
                            ImGui::SameLine();
                            if (ImGui::Button("Browse"))
                            {
                                file = FileUtils::getOpenFileDialog("Open File","",
                                                    StringBuilder()<<"All Files"<<"*.*"<<"Text Files"<<"*.TXT");

                                if (!stringInputMap.count(path))
                                {
                                    stringInputMap[path] = file;
                                }

                            }
                        }
                        break;
                        default:break;
                    }
                }
                }
            }
        }

        ImGui::SetWindowSize( ImVec2( (float)display_w , (float)display_h ) );
        if ( !bWindowSizeInit )
        {
          ImGui::SetWindowPos( ImVec2( 0 , 0 ) );
          bWindowSizeInit = true;
        }
       ImGui::End();

        // Rendering
        glfwGetFramebufferSize(m_window, &display_w, &display_h);
        glViewport(0, 0, display_w, display_h);
        glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w);
        glClear(GL_COLOR_BUFFER_BIT);
        ImGui::Render();
        glfwSwapBuffers(m_window);
    }

    // Cleanup
    ImGui_ImplGlfw_Shutdown();
    glfwTerminate();
}

UIGooeyFiAppImgui::~UIGooeyFiAppImgui()
{

}




}}}}}}//end namespace


