/*
    UIGooeyFiAppBuilder.cpp
    
MIT License

Copyright (c) 2016 cbtek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//UIGooeyFiAppBuilder.cpp generated by sunefusion on 02-25-2017 at 09:54:42 PM

#include "UIGooeyFiAppBuilder.h"
#include "ui_UIGooeyFiAppBuilder.h"

#include <QListWidgetItem>
#include <QTableWidget>
#include <QLineEdit>
#include <QPushButton>
#include <QSpinBox>
#include <QGridLayout>
#include <QLabel>
#include <QPlainTextEdit>

#include "gooeyfi_core/inc/GooeyFiUtils.h"

#include "UIGooeyFiWidgetDefaults.h"

using namespace cbtek::products::gooeyfi::core;
namespace cbtek {
namespace products {
namespace gooeyfi {
namespace builder {


UIGooeyFiAppBuilder::UIGooeyFiAppBuilder(QWidget *parent) :
    QDialog(parent),
    m_ui(new Ui_UIGooeyFiAppBuilder)
{
    m_ui->setupUi(this);    
    onInitialize();
    m_app =new GooeyFiApp("test.xml");
    m_app->addPage(core::GooeyFiWidgetPage());

}

UIGooeyFiAppBuilder::UIGooeyFiAppBuilder(const GooeyFiApp &app, QWidget *parent) :
                                         QDialog(parent),
                                         m_ui(new Ui_UIGooeyFiAppBuilder)
{
    m_ui->setupUi(this);
    onInitialize();
    m_app=app;
    onPopulate();

}

UIGooeyFiAppBuilder::~UIGooeyFiAppBuilder()
{
    delete m_ui;
}

void UIGooeyFiAppBuilder::onInitialize()
{
    m_ui->m_lstSourceWidgets->addItem("Text Input Field");
    m_ui->m_lstSourceWidgets->addItem("Password Input Field");
    m_ui->m_lstSourceWidgets->addItem("Multiline Text Input Field");
    m_ui->m_lstSourceWidgets->addItem("Integer Numeric Field");
    m_ui->m_lstSourceWidgets->addItem("Floating-point Numeric Field");
    m_ui->m_lstSourceWidgets->addItem("File Select Field");
    m_ui->m_lstSourceWidgets->addItem("Folder Select Field");
    m_ui->m_lstSourceWidgets->addItem("CheckBox Field");

    m_ui->m_tblDestinationWidgets->setColumnCount(1);
    m_ui->m_tblDestinationWidgets->horizontalHeader()->setSectionResizeMode(1,QHeaderView::Stretch);
    m_ui->m_tblDestinationWidgets->verticalHeader()->hide();
    m_ui->m_tblDestinationWidgets->horizontalHeader()->hide();
    m_ui->m_tblDestinationWidgets->setGridStyle(Qt::NoPen);
    m_ui->m_tblDestinationWidgets->setSelectionMode(QAbstractItemView::NoSelection);

    connect(m_ui->m_btnAdd,SIGNAL(clicked(bool)), this,SLOT(onAdd()));
    connect(&m_editButtonGroup,SIGNAL(buttonClicked(QAbstractButton*)),this,SLOT(onEdit(QAbstractButton*)));
    connect(&m_deleteButtonGroup,SIGNAL(buttonClicked(QAbstractButton*)),this,SLOT(onDelete(QAbstractButton*)));
}

void UIGooeyFiAppBuilder::onPopulate()
{
    for (const GooeyFiWidgetPage& page : m_app->getPages())
    {
        QTableWidget * table = new QTableWidget;

        for(const GooeyFiWidgetPtr& widget : page.getWidgets())
        {
            onAddWidget(widget,table);

        }
        //m_ui->m_twPages->addPage();
    }
}

void UIGooeyFiAppBuilder::onAdd()
{
    QListWidgetItem * selectedItem = m_ui->m_lstSourceWidgets->currentItem();
    if (selectedItem)
    {
        QString key = selectedItem->text().toUpper();
        int row = m_ui->m_tblDestinationWidgets->rowCount();
        m_ui->m_tblDestinationWidgets->setRowCount(row+1);
        QTableWidget * table = m_ui->m_tblDestinationWidgets;
        QHBoxLayout * layout = new QHBoxLayout;
        QLineEdit * widgetNameInput = new QLineEdit;
        QLabel * widgetNameLabel = new QLabel("Widget Name");
        QFrame * widgetFrame = new QFrame;
        layout->addWidget(widgetNameLabel,0,0);
        layout->addWidget(widgetNameInput,1,0);
        core::GooeyFiWidgetPage * page = &m_app->getPage(0);
        size_t index = 0;
        if (key.contains("TEXT INPUT"))
        {
            GooeyFiTextInput * input = new GooeyFiTextInput();
            input->setType(GooeyFiTextInputType::SingleLine);
            index = page->addWidget(GooeyFiWidgetPtr(input));
        }
        else if (key.contains("PASSWORD INPUT"))
        {
            GooeyFiTextInput * input = new GooeyFiTextInput();
            input->setType(GooeyFiTextInputType::Password);
            index = page->addWidget(GooeyFiWidgetPtr(input));
        }
        else if (key.contains("MULTILINE TEXT INPUT"))
        {
            GooeyFiTextInput * input = new GooeyFiTextInput();
            input->setType(GooeyFiTextInputType::MultiLine);
            index = page->addWidget(GooeyFiWidgetPtr(input));
        }
        else if (key.contains("FILE SELECT"))
        {


        }
        else if (key.contains("FOLDER SELECT"))
        {

        }


    }
}

void UIGooeyFiAppBuilder::onAddWidget(const GooeyFiWidgetPtr &widget,
                                      QTableWidget * table)
{
    size_t row = m_ui->m_tblDestinationWidgets->rowCount();
    m_ui->m_tblDestinationWidgets->setRowCount(row+1);

    QHBoxLayout * layout = new QHBoxLayout;
    QLineEdit * label = new QLineEdit;

    if (m_widget->getId() == core::GooeyFiWidgetIdType::Button)
    {
        const GooeyFiButton * button = GooeyFiUtils::getButton(widget);
        label->setText(QString::fromStdString(button->getLabel()));
    }
    else if  (m_widget->getId() == core::GooeyFiWidgetIdType::Numeric)
    {
        const GooeyFiNumeric * numeric = GooeyFiUtils::getNumeric(widget);
        label->setText(QString::fromStdString(numeric->getLabel()));
    }
    else if  (m_widget->getId() == core::GooeyFiWidgetIdType::PathBrowser)
    {
        const GooeyFiPathBrowser * pathBrowser = GooeyFiUtils::getPathBrowser(widget);
        label->setText(QString::fromStdString(pathBrowser->getLabel()));
    }
    else if  (m_widget->getId() == core::GooeyFiWidgetIdType::TextInput)
    {
        const GooeyFiTextInput * input = GooeyFiUtils::getTextInput(widget);
        label->setText(QString::fromStdString(input->getLabel()));
    }

    QPushButton *deleteButton = new QPushButton("X");
    QPushButton *editButton = new QPushButton("E");
    editButton->setProperty("buttonId", index);
    deleteButton->setProperty("buttonId", index);
    m_editButtonGroup.addButton(editButton);
    m_deleteButtonGroup.addButton(deleteButton);
    QFrame * widgetFrame = new QFrame;
    layout->addWidget(label);
    layout->addWidget(configButton);
    layout->addWidget(exitButton);
    widgetFrame->setLayout(layout);
    table->setCellWidget(row,0,widgetFrame);

}

void UIGooeyFiAppBuilder::onPreview()
{

}

void UIGooeyFiAppBuilder::onOk()
{

}

void UIGooeyFiAppBuilder::onEdit(QAbstractButton *button)
{

    if (m_currentAppPage)
    {
        m_currentAppPage->get
    }
}

void UIGooeyFiAppBuilder::onDelete(QAbstractButton *button)
{

}
}}}}//end namespace

