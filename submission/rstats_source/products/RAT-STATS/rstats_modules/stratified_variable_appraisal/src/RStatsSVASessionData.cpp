/*
    RStatsSVASessionData.cpp
    

*/
//----------------------------------------
//RStatsSVASessionData.cpp generated by cbtek on 03-31-2017 at 01:34:47 AM
//----------------------------------------
#include "RStatsSVASessionData.h"
#include "rstats_utils/inc/RStatsWorkbook.h"

using namespace cbtek::common::utility;
using namespace oig::ratstats::utils;

namespace oig {
namespace ratstats {
namespace modules {
namespace sva {


RStatsSVASessionData::RStatsSVASessionData() :
    m_dataFormat(RStatsDataFormatType::Examine),
    m_sizeTableRowStart(0),
    m_dataTableRowStart(0),
    m_universeColumn("A"),
    m_sampleColumn("A"),
    m_differenceColumn("A"),
    m_auditColumn("A"),
    m_examineColumn("A")
    {}

RStatsSVASessionData::~RStatsSVASessionData()
{

}

void RStatsSVASessionData::setDataFormat(const RStatsDataFormatType&  value)
{
    m_dataFormat=value;
}

void RStatsSVASessionData::setSizeTableFilePath(const std::string& value)
{
    m_sizeTableFilePath=value;
}

void RStatsSVASessionData::setDataTableFilePath(const std::string& value)
{
    m_dataTableFilePath=value;
}

void RStatsSVASessionData::setSizeTableRowStart(const RStatsInteger&  value)
{
    m_sizeTableRowStart=value;
}

void RStatsSVASessionData::setDataTableRowStart(const RStatsInteger&  value)
{
    m_dataTableRowStart=value;
}

void RStatsSVASessionData::setUniverseColumn(const std::string&  value)
{
    m_universeColumn=value;
}

void RStatsSVASessionData::setSampleColumn(const std::string&  value)
{
    m_sampleColumn=value;
}

void RStatsSVASessionData::setDifferenceColumn(const std::string&  value)
{
    m_differenceColumn=value;
}

void RStatsSVASessionData::setAuditColumn(const std::string&  value)
{
    m_auditColumn=value;
}

void RStatsSVASessionData::setExamineColumn(const std::string&  value)
{
    m_examineColumn=value;
}

const RStatsDataFormatType& RStatsSVASessionData::getDataFormat() const
{
    return m_dataFormat;
}

const std::string& RStatsSVASessionData::getSizeTableFilePath() const
{
    return m_sizeTableFilePath;
}

const std::string& RStatsSVASessionData::getDataTableFilePath() const
{
    return m_dataTableFilePath;
}

const RStatsInteger& RStatsSVASessionData::getSizeTableRowStart() const
{
    return m_sizeTableRowStart;
}

const RStatsInteger& RStatsSVASessionData::getDataTableRowStart() const
{
    return m_dataTableRowStart;
}

const std::string& RStatsSVASessionData::getUniverseColumn() const
{
    return m_universeColumn;
}

const std::string& RStatsSVASessionData::getSampleColumn() const
{
    return m_sampleColumn;
}

const std::string& RStatsSVASessionData::getDifferenceColumn() const
{
    return m_differenceColumn;
}

const std::string& RStatsSVASessionData::getAuditColumn() const
{
    return m_auditColumn;
}

const std::string& RStatsSVASessionData::getExamineColumn() const
{
    return m_examineColumn;
}

std::string RStatsSVASessionData::getType() const
{
    return c_RECENT_SESSION_EXTENSION;
}

void RStatsSVASessionData::load(const std::string& url)
{
    XMLReader xml;
    xml.load(url);
    XMLDataElement * element = xml.getElement("session");
    if (element)
    {
        RStatsModuleSessionDataImpl::load(element);
        setDataFormat(static_cast<RStatsDataFormatType>(element->getChildElementDataAsType<RStatsInteger>("dataFormat")));
        setDataTableRowStart(element->getChildElementDataAsType<RStatsInteger>("dataRowStart"));
        setSizeTableRowStart(element->getChildElementDataAsType<RStatsInteger>("sizeRowStart"));
        setDifferenceColumn(element->getChildElementData("differenceColumn"));
        setExamineColumn(element->getChildElementData("examineColumn"));
        setAuditColumn(element->getChildElementData("auditColumn"));
        setUniverseColumn(element->getChildElementData("universeColumn"));
        setSampleColumn(element->getChildElementData("sampleColumn"));
        setDataTableSheetName(element->getChildElementData("dataTableSheetName"));
        setSizeTableSheetName(element->getChildElementData("sizeTableSheetName"));
        setSizeTableFilePath(element->getChildElementData("sizeTableFilePath"));
        setDataTableFilePath(element->getChildElementData("dataTableFilePath"));        
    }
}

void RStatsSVASessionData::save(const std::string& url)
{
    std::ostringstream out;
    XMLStreamWriter xml(out);
    xml.writeStartDocument();
    xml.writeStartElementNoAttributes("session");
    RStatsModuleSessionDataImpl::save(xml);    
    xml.writeTextElement("dataFormat",StringUtils::toString(static_cast<int>(this->getDataFormat())));
    xml.writeTextElement("dataRowStart",StringUtils::toString(getDataTableRowStart()));
    xml.writeTextElement("sizeRowStart",StringUtils::toString(getSizeTableRowStart()));
    xml.writeTextElement("differenceColumn",getDifferenceColumn());
    xml.writeTextElement("examineColumn",getExamineColumn());
    xml.writeTextElement("auditColumn",getAuditColumn());
    xml.writeTextElement("universeColumn",getUniverseColumn());
    xml.writeTextElement("sampleColumn",getSampleColumn());    
    xml.writeTextElement("dataTableSheetName",getDataTableSheetName());
    xml.writeTextElement("sizeTableSheetName",getSizeTableSheetName());
    xml.writeTextElement("dataTableFilePath", getDataTableFilePath());
    xml.writeTextElement("sizeTableFilePath", getSizeTableFilePath());
    xml.writeEndElement("session");
    FileUtils::writeFileContents(url,out.str());
}

void RStatsSVASessionData::setSizeTableSheetName(const std::string& name)
{
    m_sizeTableSheetName = name;
}

void RStatsSVASessionData::setDataTableSheetName(const std::string& name)
{
    m_dataTableSheetName = name;
}

std::string RStatsSVASessionData::getDataTableSheetName() const
{
    return m_dataTableSheetName;
}

std::string RStatsSVASessionData::getSizeTableSheetName() const
{
    return m_sizeTableSheetName;
}


}}}}//end namespace


